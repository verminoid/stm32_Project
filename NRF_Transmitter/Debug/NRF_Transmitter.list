
NRF_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080026bc  080026bc  000126bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002860  08002860  00012860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d4  20000070  080028d4  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000144  080028d4  00020144  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bfdc  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f15  00000000  00000000  0002c075  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000044f2  00000000  00000000  0002df8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008c8  00000000  00000000  00032480  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ad8  00000000  00000000  00032d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00013e32  00000000  00000000  00033820  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006e84  00000000  00000000  00047652  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0006ca3a  00000000  00000000  0004e4d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000f7  00000000  00000000  000baf10  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001bcc  00000000  00000000  000bb008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080026a4 	.word	0x080026a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080026a4 	.word	0x080026a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000160:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	4b0e      	ldr	r3, [pc, #56]	; (800019c <HAL_InitTick+0x3c>)
{
 8000164:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000166:	7818      	ldrb	r0, [r3, #0]
 8000168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800016c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000170:	4a0b      	ldr	r2, [pc, #44]	; (80001a0 <HAL_InitTick+0x40>)
 8000172:	6810      	ldr	r0, [r2, #0]
 8000174:	fbb0 f0f3 	udiv	r0, r0, r3
 8000178:	f000 f8a0 	bl	80002bc <HAL_SYSTICK_Config>
 800017c:	4604      	mov	r4, r0
 800017e:	b958      	cbnz	r0, 8000198 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000180:	2d0f      	cmp	r5, #15
 8000182:	d809      	bhi.n	8000198 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000184:	4602      	mov	r2, r0
 8000186:	4629      	mov	r1, r5
 8000188:	f04f 30ff 	mov.w	r0, #4294967295
 800018c:	f000 f854 	bl	8000238 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000190:	4620      	mov	r0, r4
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <HAL_InitTick+0x44>)
 8000194:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000198:	2001      	movs	r0, #1
 800019a:	e7fc      	b.n	8000196 <HAL_InitTick+0x36>
 800019c:	20000000 	.word	0x20000000
 80001a0:	20000008 	.word	0x20000008
 80001a4:	20000004 	.word	0x20000004

080001a8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <HAL_Init+0x20>)
{
 80001aa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ae:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001b0:	f043 0310 	orr.w	r3, r3, #16
 80001b4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b6:	f000 f82d 	bl	8000214 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ba:	2000      	movs	r0, #0
 80001bc:	f7ff ffd0 	bl	8000160 <HAL_InitTick>
  HAL_MspInit();
 80001c0:	f001 fd0a 	bl	8001bd8 <HAL_MspInit>
}
 80001c4:	2000      	movs	r0, #0
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	40022000 	.word	0x40022000

080001cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001cc:	4a03      	ldr	r2, [pc, #12]	; (80001dc <HAL_IncTick+0x10>)
 80001ce:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <HAL_IncTick+0x14>)
 80001d0:	6811      	ldr	r1, [r2, #0]
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	440b      	add	r3, r1
 80001d6:	6013      	str	r3, [r2, #0]
}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	200000a0 	.word	0x200000a0
 80001e0:	20000000 	.word	0x20000000

080001e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e4:	4b01      	ldr	r3, [pc, #4]	; (80001ec <HAL_GetTick+0x8>)
 80001e6:	6818      	ldr	r0, [r3, #0]
}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	200000a0 	.word	0x200000a0

080001f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001f0:	b538      	push	{r3, r4, r5, lr}
 80001f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f4:	f7ff fff6 	bl	80001e4 <HAL_GetTick>
 80001f8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001fa:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001fc:	bf1e      	ittt	ne
 80001fe:	4b04      	ldrne	r3, [pc, #16]	; (8000210 <HAL_Delay+0x20>)
 8000200:	781b      	ldrbne	r3, [r3, #0]
 8000202:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000204:	f7ff ffee 	bl	80001e4 <HAL_GetTick>
 8000208:	1b40      	subs	r0, r0, r5
 800020a:	42a0      	cmp	r0, r4
 800020c:	d3fa      	bcc.n	8000204 <HAL_Delay+0x14>
  {
  }
}
 800020e:	bd38      	pop	{r3, r4, r5, pc}
 8000210:	20000000 	.word	0x20000000

08000214 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	4a07      	ldr	r2, [pc, #28]	; (8000234 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000216:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000218:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800021a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000222:	041b      	lsls	r3, r3, #16
 8000224:	0c1b      	lsrs	r3, r3, #16
 8000226:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800022a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000230:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00

08000238 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800023a:	b570      	push	{r4, r5, r6, lr}
 800023c:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023e:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000242:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000246:	f1c4 0507 	rsb	r5, r4, #7
 800024a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000250:	bf28      	it	cs
 8000252:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000254:	2b06      	cmp	r3, #6
 8000256:	bf98      	it	ls
 8000258:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	bf88      	it	hi
 8000260:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000262:	ea21 0303 	bic.w	r3, r1, r3
 8000266:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000268:	fa06 f404 	lsl.w	r4, r6, r4
 800026c:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000270:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000272:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfa8      	it	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800027c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	bfb8      	it	lt
 8000282:	4a06      	ldrlt	r2, [pc, #24]	; (800029c <HAL_NVIC_SetPriority+0x64>)
 8000284:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000286:	bfab      	itete	ge
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000296:	bd70      	pop	{r4, r5, r6, pc}
 8000298:	e000ed00 	.word	0xe000ed00
 800029c:	e000ed14 	.word	0xe000ed14

080002a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80002a0:	2800      	cmp	r0, #0
 80002a2:	db08      	blt.n	80002b6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a4:	2301      	movs	r3, #1
 80002a6:	0942      	lsrs	r2, r0, #5
 80002a8:	f000 001f 	and.w	r0, r0, #31
 80002ac:	fa03 f000 	lsl.w	r0, r3, r0
 80002b0:	4b01      	ldr	r3, [pc, #4]	; (80002b8 <HAL_NVIC_EnableIRQ+0x18>)
 80002b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80002b6:	4770      	bx	lr
 80002b8:	e000e100 	.word	0xe000e100

080002bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002bc:	3801      	subs	r0, #1
 80002be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002c2:	d20a      	bcs.n	80002da <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	4a06      	ldr	r2, [pc, #24]	; (80002e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ca:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e010 	.word	0xe000e010
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002ec:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002ee:	4626      	mov	r6, r4
 80002f0:	4b65      	ldr	r3, [pc, #404]	; (8000488 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002f2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000498 <HAL_GPIO_Init+0x1b0>
 80002f6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800049c <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002fa:	680a      	ldr	r2, [r1, #0]
 80002fc:	fa32 f506 	lsrs.w	r5, r2, r6
 8000300:	d102      	bne.n	8000308 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000302:	b003      	add	sp, #12
 8000304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000308:	f04f 0801 	mov.w	r8, #1
 800030c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000310:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000314:	4590      	cmp	r8, r2
 8000316:	d17e      	bne.n	8000416 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8000318:	684d      	ldr	r5, [r1, #4]
 800031a:	2d12      	cmp	r5, #18
 800031c:	f000 80a9 	beq.w	8000472 <HAL_GPIO_Init+0x18a>
 8000320:	f200 8082 	bhi.w	8000428 <HAL_GPIO_Init+0x140>
 8000324:	2d02      	cmp	r5, #2
 8000326:	f000 80a1 	beq.w	800046c <HAL_GPIO_Init+0x184>
 800032a:	d876      	bhi.n	800041a <HAL_GPIO_Init+0x132>
 800032c:	2d00      	cmp	r5, #0
 800032e:	f000 8088 	beq.w	8000442 <HAL_GPIO_Init+0x15a>
 8000332:	2d01      	cmp	r5, #1
 8000334:	f000 8098 	beq.w	8000468 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000338:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800033c:	2aff      	cmp	r2, #255	; 0xff
 800033e:	bf93      	iteet	ls
 8000340:	4682      	movls	sl, r0
 8000342:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000346:	3d08      	subhi	r5, #8
 8000348:	f8d0 b000 	ldrls.w	fp, [r0]
 800034c:	bf92      	itee	ls
 800034e:	00b5      	lslls	r5, r6, #2
 8000350:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000354:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000356:	fa09 f805 	lsl.w	r8, r9, r5
 800035a:	ea2b 0808 	bic.w	r8, fp, r8
 800035e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000362:	bf88      	it	hi
 8000364:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000368:	ea48 0505 	orr.w	r5, r8, r5
 800036c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000370:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000374:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000378:	d04d      	beq.n	8000416 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	4f44      	ldr	r7, [pc, #272]	; (800048c <HAL_GPIO_Init+0x1a4>)
 800037c:	f026 0803 	bic.w	r8, r6, #3
 8000380:	69bd      	ldr	r5, [r7, #24]
 8000382:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000386:	f045 0501 	orr.w	r5, r5, #1
 800038a:	61bd      	str	r5, [r7, #24]
 800038c:	69bd      	ldr	r5, [r7, #24]
 800038e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000392:	f005 0501 	and.w	r5, r5, #1
 8000396:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000398:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800039c:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800039e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80003a2:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80003a6:	fa09 f90b 	lsl.w	r9, r9, fp
 80003aa:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80003ae:	4d38      	ldr	r5, [pc, #224]	; (8000490 <HAL_GPIO_Init+0x1a8>)
 80003b0:	42a8      	cmp	r0, r5
 80003b2:	d063      	beq.n	800047c <HAL_GPIO_Init+0x194>
 80003b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b8:	42a8      	cmp	r0, r5
 80003ba:	d061      	beq.n	8000480 <HAL_GPIO_Init+0x198>
 80003bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003c0:	42a8      	cmp	r0, r5
 80003c2:	d05f      	beq.n	8000484 <HAL_GPIO_Init+0x19c>
 80003c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003c8:	42a8      	cmp	r0, r5
 80003ca:	bf0c      	ite	eq
 80003cc:	2503      	moveq	r5, #3
 80003ce:	2504      	movne	r5, #4
 80003d0:	fa05 f50b 	lsl.w	r5, r5, fp
 80003d4:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003d8:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003dc:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003de:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003e2:	bf14      	ite	ne
 80003e4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003e6:	4395      	biceq	r5, r2
 80003e8:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003ea:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ec:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003f0:	bf14      	ite	ne
 80003f2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003f4:	4395      	biceq	r5, r2
 80003f6:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003f8:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003fa:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003fe:	bf14      	ite	ne
 8000400:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000402:	4395      	biceq	r5, r2
 8000404:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000406:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000408:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800040c:	bf14      	ite	ne
 800040e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000410:	ea25 0202 	biceq.w	r2, r5, r2
 8000414:	60da      	str	r2, [r3, #12]
	position++;
 8000416:	3601      	adds	r6, #1
 8000418:	e76f      	b.n	80002fa <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800041a:	2d03      	cmp	r5, #3
 800041c:	d022      	beq.n	8000464 <HAL_GPIO_Init+0x17c>
 800041e:	2d11      	cmp	r5, #17
 8000420:	d18a      	bne.n	8000338 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000422:	68cc      	ldr	r4, [r1, #12]
 8000424:	3404      	adds	r4, #4
          break;
 8000426:	e787      	b.n	8000338 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000428:	4f1a      	ldr	r7, [pc, #104]	; (8000494 <HAL_GPIO_Init+0x1ac>)
 800042a:	42bd      	cmp	r5, r7
 800042c:	d009      	beq.n	8000442 <HAL_GPIO_Init+0x15a>
 800042e:	d812      	bhi.n	8000456 <HAL_GPIO_Init+0x16e>
 8000430:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80004a0 <HAL_GPIO_Init+0x1b8>
 8000434:	454d      	cmp	r5, r9
 8000436:	d004      	beq.n	8000442 <HAL_GPIO_Init+0x15a>
 8000438:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800043c:	454d      	cmp	r5, r9
 800043e:	f47f af7b 	bne.w	8000338 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000442:	688c      	ldr	r4, [r1, #8]
 8000444:	b1c4      	cbz	r4, 8000478 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000446:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000448:	bf0c      	ite	eq
 800044a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800044e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000452:	2408      	movs	r4, #8
 8000454:	e770      	b.n	8000338 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000456:	4565      	cmp	r5, ip
 8000458:	d0f3      	beq.n	8000442 <HAL_GPIO_Init+0x15a>
 800045a:	4575      	cmp	r5, lr
 800045c:	d0f1      	beq.n	8000442 <HAL_GPIO_Init+0x15a>
 800045e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004a4 <HAL_GPIO_Init+0x1bc>
 8000462:	e7eb      	b.n	800043c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000464:	2400      	movs	r4, #0
 8000466:	e767      	b.n	8000338 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000468:	68cc      	ldr	r4, [r1, #12]
          break;
 800046a:	e765      	b.n	8000338 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800046c:	68cc      	ldr	r4, [r1, #12]
 800046e:	3408      	adds	r4, #8
          break;
 8000470:	e762      	b.n	8000338 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000472:	68cc      	ldr	r4, [r1, #12]
 8000474:	340c      	adds	r4, #12
          break;
 8000476:	e75f      	b.n	8000338 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000478:	2404      	movs	r4, #4
 800047a:	e75d      	b.n	8000338 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800047c:	2500      	movs	r5, #0
 800047e:	e7a7      	b.n	80003d0 <HAL_GPIO_Init+0xe8>
 8000480:	2501      	movs	r5, #1
 8000482:	e7a5      	b.n	80003d0 <HAL_GPIO_Init+0xe8>
 8000484:	2502      	movs	r5, #2
 8000486:	e7a3      	b.n	80003d0 <HAL_GPIO_Init+0xe8>
 8000488:	40010400 	.word	0x40010400
 800048c:	40021000 	.word	0x40021000
 8000490:	40010800 	.word	0x40010800
 8000494:	10210000 	.word	0x10210000
 8000498:	10310000 	.word	0x10310000
 800049c:	10320000 	.word	0x10320000
 80004a0:	10110000 	.word	0x10110000
 80004a4:	10220000 	.word	0x10220000

080004a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004a8:	b10a      	cbz	r2, 80004ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004aa:	6101      	str	r1, [r0, #16]
  }
}
 80004ac:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004ae:	0409      	lsls	r1, r1, #16
 80004b0:	e7fb      	b.n	80004aa <HAL_GPIO_WritePin+0x2>

080004b2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80004b2:	68c3      	ldr	r3, [r0, #12]
 80004b4:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b6:	bf14      	ite	ne
 80004b8:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004ba:	6101      	streq	r1, [r0, #16]
  }
}
 80004bc:	4770      	bx	lr
	...

080004c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80004c0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80004c2:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80004c4:	6959      	ldr	r1, [r3, #20]
 80004c6:	4201      	tst	r1, r0
 80004c8:	d002      	beq.n	80004d0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004ca:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004cc:	f000 fe60 	bl	8001190 <HAL_GPIO_EXTI_Callback>
  }
}
 80004d0:	bd08      	pop	{r3, pc}
 80004d2:	bf00      	nop
 80004d4:	40010400 	.word	0x40010400

080004d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80004dc:	4605      	mov	r5, r0
 80004de:	b908      	cbnz	r0, 80004e4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80004e0:	2001      	movs	r0, #1
 80004e2:	e03c      	b.n	800055e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e4:	6803      	ldr	r3, [r0, #0]
 80004e6:	07db      	lsls	r3, r3, #31
 80004e8:	d410      	bmi.n	800050c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004ea:	682b      	ldr	r3, [r5, #0]
 80004ec:	079f      	lsls	r7, r3, #30
 80004ee:	d45d      	bmi.n	80005ac <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004f0:	682b      	ldr	r3, [r5, #0]
 80004f2:	0719      	lsls	r1, r3, #28
 80004f4:	f100 8094 	bmi.w	8000620 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004f8:	682b      	ldr	r3, [r5, #0]
 80004fa:	075a      	lsls	r2, r3, #29
 80004fc:	f100 80be 	bmi.w	800067c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000500:	69e8      	ldr	r0, [r5, #28]
 8000502:	2800      	cmp	r0, #0
 8000504:	f040 812c 	bne.w	8000760 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000508:	2000      	movs	r0, #0
 800050a:	e028      	b.n	800055e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800050c:	4c8f      	ldr	r4, [pc, #572]	; (800074c <HAL_RCC_OscConfig+0x274>)
 800050e:	6863      	ldr	r3, [r4, #4]
 8000510:	f003 030c 	and.w	r3, r3, #12
 8000514:	2b04      	cmp	r3, #4
 8000516:	d007      	beq.n	8000528 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000518:	6863      	ldr	r3, [r4, #4]
 800051a:	f003 030c 	and.w	r3, r3, #12
 800051e:	2b08      	cmp	r3, #8
 8000520:	d109      	bne.n	8000536 <HAL_RCC_OscConfig+0x5e>
 8000522:	6863      	ldr	r3, [r4, #4]
 8000524:	03de      	lsls	r6, r3, #15
 8000526:	d506      	bpl.n	8000536 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000528:	6823      	ldr	r3, [r4, #0]
 800052a:	039c      	lsls	r4, r3, #14
 800052c:	d5dd      	bpl.n	80004ea <HAL_RCC_OscConfig+0x12>
 800052e:	686b      	ldr	r3, [r5, #4]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1da      	bne.n	80004ea <HAL_RCC_OscConfig+0x12>
 8000534:	e7d4      	b.n	80004e0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000536:	686b      	ldr	r3, [r5, #4]
 8000538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800053c:	d112      	bne.n	8000564 <HAL_RCC_OscConfig+0x8c>
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000544:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000546:	f7ff fe4d 	bl	80001e4 <HAL_GetTick>
 800054a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800054c:	6823      	ldr	r3, [r4, #0]
 800054e:	0398      	lsls	r0, r3, #14
 8000550:	d4cb      	bmi.n	80004ea <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000552:	f7ff fe47 	bl	80001e4 <HAL_GetTick>
 8000556:	1b80      	subs	r0, r0, r6
 8000558:	2864      	cmp	r0, #100	; 0x64
 800055a:	d9f7      	bls.n	800054c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800055c:	2003      	movs	r0, #3
}
 800055e:	b002      	add	sp, #8
 8000560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000564:	b99b      	cbnz	r3, 800058e <HAL_RCC_OscConfig+0xb6>
 8000566:	6823      	ldr	r3, [r4, #0]
 8000568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800056c:	6023      	str	r3, [r4, #0]
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000574:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000576:	f7ff fe35 	bl	80001e4 <HAL_GetTick>
 800057a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800057c:	6823      	ldr	r3, [r4, #0]
 800057e:	0399      	lsls	r1, r3, #14
 8000580:	d5b3      	bpl.n	80004ea <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000582:	f7ff fe2f 	bl	80001e4 <HAL_GetTick>
 8000586:	1b80      	subs	r0, r0, r6
 8000588:	2864      	cmp	r0, #100	; 0x64
 800058a:	d9f7      	bls.n	800057c <HAL_RCC_OscConfig+0xa4>
 800058c:	e7e6      	b.n	800055c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800058e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000592:	6823      	ldr	r3, [r4, #0]
 8000594:	d103      	bne.n	800059e <HAL_RCC_OscConfig+0xc6>
 8000596:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800059a:	6023      	str	r3, [r4, #0]
 800059c:	e7cf      	b.n	800053e <HAL_RCC_OscConfig+0x66>
 800059e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005a2:	6023      	str	r3, [r4, #0]
 80005a4:	6823      	ldr	r3, [r4, #0]
 80005a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005aa:	e7cb      	b.n	8000544 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80005ac:	4c67      	ldr	r4, [pc, #412]	; (800074c <HAL_RCC_OscConfig+0x274>)
 80005ae:	6863      	ldr	r3, [r4, #4]
 80005b0:	f013 0f0c 	tst.w	r3, #12
 80005b4:	d007      	beq.n	80005c6 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005b6:	6863      	ldr	r3, [r4, #4]
 80005b8:	f003 030c 	and.w	r3, r3, #12
 80005bc:	2b08      	cmp	r3, #8
 80005be:	d110      	bne.n	80005e2 <HAL_RCC_OscConfig+0x10a>
 80005c0:	6863      	ldr	r3, [r4, #4]
 80005c2:	03da      	lsls	r2, r3, #15
 80005c4:	d40d      	bmi.n	80005e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005c6:	6823      	ldr	r3, [r4, #0]
 80005c8:	079b      	lsls	r3, r3, #30
 80005ca:	d502      	bpl.n	80005d2 <HAL_RCC_OscConfig+0xfa>
 80005cc:	692b      	ldr	r3, [r5, #16]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d186      	bne.n	80004e0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005d2:	6823      	ldr	r3, [r4, #0]
 80005d4:	696a      	ldr	r2, [r5, #20]
 80005d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005de:	6023      	str	r3, [r4, #0]
 80005e0:	e786      	b.n	80004f0 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005e2:	692a      	ldr	r2, [r5, #16]
 80005e4:	4b5a      	ldr	r3, [pc, #360]	; (8000750 <HAL_RCC_OscConfig+0x278>)
 80005e6:	b16a      	cbz	r2, 8000604 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ec:	f7ff fdfa 	bl	80001e4 <HAL_GetTick>
 80005f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005f2:	6823      	ldr	r3, [r4, #0]
 80005f4:	079f      	lsls	r7, r3, #30
 80005f6:	d4ec      	bmi.n	80005d2 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005f8:	f7ff fdf4 	bl	80001e4 <HAL_GetTick>
 80005fc:	1b80      	subs	r0, r0, r6
 80005fe:	2802      	cmp	r0, #2
 8000600:	d9f7      	bls.n	80005f2 <HAL_RCC_OscConfig+0x11a>
 8000602:	e7ab      	b.n	800055c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000604:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000606:	f7ff fded 	bl	80001e4 <HAL_GetTick>
 800060a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800060c:	6823      	ldr	r3, [r4, #0]
 800060e:	0798      	lsls	r0, r3, #30
 8000610:	f57f af6e 	bpl.w	80004f0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000614:	f7ff fde6 	bl	80001e4 <HAL_GetTick>
 8000618:	1b80      	subs	r0, r0, r6
 800061a:	2802      	cmp	r0, #2
 800061c:	d9f6      	bls.n	800060c <HAL_RCC_OscConfig+0x134>
 800061e:	e79d      	b.n	800055c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000620:	69aa      	ldr	r2, [r5, #24]
 8000622:	4c4a      	ldr	r4, [pc, #296]	; (800074c <HAL_RCC_OscConfig+0x274>)
 8000624:	4b4b      	ldr	r3, [pc, #300]	; (8000754 <HAL_RCC_OscConfig+0x27c>)
 8000626:	b1da      	cbz	r2, 8000660 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000628:	2201      	movs	r2, #1
 800062a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800062c:	f7ff fdda 	bl	80001e4 <HAL_GetTick>
 8000630:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000634:	079b      	lsls	r3, r3, #30
 8000636:	d50d      	bpl.n	8000654 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000638:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800063c:	4b46      	ldr	r3, [pc, #280]	; (8000758 <HAL_RCC_OscConfig+0x280>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	fbb3 f3f2 	udiv	r3, r3, r2
 8000644:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000646:	bf00      	nop
  }
  while (Delay --);
 8000648:	9b01      	ldr	r3, [sp, #4]
 800064a:	1e5a      	subs	r2, r3, #1
 800064c:	9201      	str	r2, [sp, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1f9      	bne.n	8000646 <HAL_RCC_OscConfig+0x16e>
 8000652:	e751      	b.n	80004f8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000654:	f7ff fdc6 	bl	80001e4 <HAL_GetTick>
 8000658:	1b80      	subs	r0, r0, r6
 800065a:	2802      	cmp	r0, #2
 800065c:	d9e9      	bls.n	8000632 <HAL_RCC_OscConfig+0x15a>
 800065e:	e77d      	b.n	800055c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000660:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000662:	f7ff fdbf 	bl	80001e4 <HAL_GetTick>
 8000666:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800066a:	079f      	lsls	r7, r3, #30
 800066c:	f57f af44 	bpl.w	80004f8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000670:	f7ff fdb8 	bl	80001e4 <HAL_GetTick>
 8000674:	1b80      	subs	r0, r0, r6
 8000676:	2802      	cmp	r0, #2
 8000678:	d9f6      	bls.n	8000668 <HAL_RCC_OscConfig+0x190>
 800067a:	e76f      	b.n	800055c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800067c:	4c33      	ldr	r4, [pc, #204]	; (800074c <HAL_RCC_OscConfig+0x274>)
 800067e:	69e3      	ldr	r3, [r4, #28]
 8000680:	00d8      	lsls	r0, r3, #3
 8000682:	d424      	bmi.n	80006ce <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000684:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	69e3      	ldr	r3, [r4, #28]
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	61e3      	str	r3, [r4, #28]
 800068e:	69e3      	ldr	r3, [r4, #28]
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000698:	4e30      	ldr	r6, [pc, #192]	; (800075c <HAL_RCC_OscConfig+0x284>)
 800069a:	6833      	ldr	r3, [r6, #0]
 800069c:	05d9      	lsls	r1, r3, #23
 800069e:	d518      	bpl.n	80006d2 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006a0:	68eb      	ldr	r3, [r5, #12]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d126      	bne.n	80006f4 <HAL_RCC_OscConfig+0x21c>
 80006a6:	6a23      	ldr	r3, [r4, #32]
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006ae:	f7ff fd99 	bl	80001e4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006b2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80006b6:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80006b8:	6a23      	ldr	r3, [r4, #32]
 80006ba:	079b      	lsls	r3, r3, #30
 80006bc:	d53f      	bpl.n	800073e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80006be:	2f00      	cmp	r7, #0
 80006c0:	f43f af1e 	beq.w	8000500 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80006c4:	69e3      	ldr	r3, [r4, #28]
 80006c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006ca:	61e3      	str	r3, [r4, #28]
 80006cc:	e718      	b.n	8000500 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80006ce:	2700      	movs	r7, #0
 80006d0:	e7e2      	b.n	8000698 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006d2:	6833      	ldr	r3, [r6, #0]
 80006d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006da:	f7ff fd83 	bl	80001e4 <HAL_GetTick>
 80006de:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006e0:	6833      	ldr	r3, [r6, #0]
 80006e2:	05da      	lsls	r2, r3, #23
 80006e4:	d4dc      	bmi.n	80006a0 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006e6:	f7ff fd7d 	bl	80001e4 <HAL_GetTick>
 80006ea:	eba0 0008 	sub.w	r0, r0, r8
 80006ee:	2864      	cmp	r0, #100	; 0x64
 80006f0:	d9f6      	bls.n	80006e0 <HAL_RCC_OscConfig+0x208>
 80006f2:	e733      	b.n	800055c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006f4:	b9ab      	cbnz	r3, 8000722 <HAL_RCC_OscConfig+0x24a>
 80006f6:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006f8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006fc:	f023 0301 	bic.w	r3, r3, #1
 8000700:	6223      	str	r3, [r4, #32]
 8000702:	6a23      	ldr	r3, [r4, #32]
 8000704:	f023 0304 	bic.w	r3, r3, #4
 8000708:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800070a:	f7ff fd6b 	bl	80001e4 <HAL_GetTick>
 800070e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000710:	6a23      	ldr	r3, [r4, #32]
 8000712:	0798      	lsls	r0, r3, #30
 8000714:	d5d3      	bpl.n	80006be <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000716:	f7ff fd65 	bl	80001e4 <HAL_GetTick>
 800071a:	1b80      	subs	r0, r0, r6
 800071c:	4540      	cmp	r0, r8
 800071e:	d9f7      	bls.n	8000710 <HAL_RCC_OscConfig+0x238>
 8000720:	e71c      	b.n	800055c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000722:	2b05      	cmp	r3, #5
 8000724:	6a23      	ldr	r3, [r4, #32]
 8000726:	d103      	bne.n	8000730 <HAL_RCC_OscConfig+0x258>
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6223      	str	r3, [r4, #32]
 800072e:	e7ba      	b.n	80006a6 <HAL_RCC_OscConfig+0x1ce>
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	6223      	str	r3, [r4, #32]
 8000736:	6a23      	ldr	r3, [r4, #32]
 8000738:	f023 0304 	bic.w	r3, r3, #4
 800073c:	e7b6      	b.n	80006ac <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800073e:	f7ff fd51 	bl	80001e4 <HAL_GetTick>
 8000742:	eba0 0008 	sub.w	r0, r0, r8
 8000746:	42b0      	cmp	r0, r6
 8000748:	d9b6      	bls.n	80006b8 <HAL_RCC_OscConfig+0x1e0>
 800074a:	e707      	b.n	800055c <HAL_RCC_OscConfig+0x84>
 800074c:	40021000 	.word	0x40021000
 8000750:	42420000 	.word	0x42420000
 8000754:	42420480 	.word	0x42420480
 8000758:	20000008 	.word	0x20000008
 800075c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000760:	4b2a      	ldr	r3, [pc, #168]	; (800080c <HAL_RCC_OscConfig+0x334>)
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	461c      	mov	r4, r3
 8000766:	f002 020c 	and.w	r2, r2, #12
 800076a:	2a08      	cmp	r2, #8
 800076c:	d03d      	beq.n	80007ea <HAL_RCC_OscConfig+0x312>
 800076e:	2300      	movs	r3, #0
 8000770:	4e27      	ldr	r6, [pc, #156]	; (8000810 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000772:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000774:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000776:	d12b      	bne.n	80007d0 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000778:	f7ff fd34 	bl	80001e4 <HAL_GetTick>
 800077c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800077e:	6823      	ldr	r3, [r4, #0]
 8000780:	0199      	lsls	r1, r3, #6
 8000782:	d41f      	bmi.n	80007c4 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000784:	6a2b      	ldr	r3, [r5, #32]
 8000786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800078a:	d105      	bne.n	8000798 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800078c:	6862      	ldr	r2, [r4, #4]
 800078e:	68a9      	ldr	r1, [r5, #8]
 8000790:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000794:	430a      	orrs	r2, r1
 8000796:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000798:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800079a:	6862      	ldr	r2, [r4, #4]
 800079c:	430b      	orrs	r3, r1
 800079e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80007a2:	4313      	orrs	r3, r2
 80007a4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80007a6:	2301      	movs	r3, #1
 80007a8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80007aa:	f7ff fd1b 	bl	80001e4 <HAL_GetTick>
 80007ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80007b0:	6823      	ldr	r3, [r4, #0]
 80007b2:	019a      	lsls	r2, r3, #6
 80007b4:	f53f aea8 	bmi.w	8000508 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007b8:	f7ff fd14 	bl	80001e4 <HAL_GetTick>
 80007bc:	1b40      	subs	r0, r0, r5
 80007be:	2802      	cmp	r0, #2
 80007c0:	d9f6      	bls.n	80007b0 <HAL_RCC_OscConfig+0x2d8>
 80007c2:	e6cb      	b.n	800055c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007c4:	f7ff fd0e 	bl	80001e4 <HAL_GetTick>
 80007c8:	1bc0      	subs	r0, r0, r7
 80007ca:	2802      	cmp	r0, #2
 80007cc:	d9d7      	bls.n	800077e <HAL_RCC_OscConfig+0x2a6>
 80007ce:	e6c5      	b.n	800055c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007d0:	f7ff fd08 	bl	80001e4 <HAL_GetTick>
 80007d4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007d6:	6823      	ldr	r3, [r4, #0]
 80007d8:	019b      	lsls	r3, r3, #6
 80007da:	f57f ae95 	bpl.w	8000508 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007de:	f7ff fd01 	bl	80001e4 <HAL_GetTick>
 80007e2:	1b40      	subs	r0, r0, r5
 80007e4:	2802      	cmp	r0, #2
 80007e6:	d9f6      	bls.n	80007d6 <HAL_RCC_OscConfig+0x2fe>
 80007e8:	e6b8      	b.n	800055c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80007ea:	2801      	cmp	r0, #1
 80007ec:	f43f aeb7 	beq.w	800055e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80007f0:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80007f2:	6a2b      	ldr	r3, [r5, #32]
 80007f4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80007f8:	429a      	cmp	r2, r3
 80007fa:	f47f ae71 	bne.w	80004e0 <HAL_RCC_OscConfig+0x8>
 80007fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000800:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000804:	1ac0      	subs	r0, r0, r3
 8000806:	bf18      	it	ne
 8000808:	2001      	movne	r0, #1
 800080a:	e6a8      	b.n	800055e <HAL_RCC_OscConfig+0x86>
 800080c:	40021000 	.word	0x40021000
 8000810:	42420060 	.word	0x42420060

08000814 <HAL_RCC_GetSysClockFreq>:
{
 8000814:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000818:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800081a:	ac02      	add	r4, sp, #8
 800081c:	f103 0510 	add.w	r5, r3, #16
 8000820:	4622      	mov	r2, r4
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	6859      	ldr	r1, [r3, #4]
 8000826:	3308      	adds	r3, #8
 8000828:	c203      	stmia	r2!, {r0, r1}
 800082a:	42ab      	cmp	r3, r5
 800082c:	4614      	mov	r4, r2
 800082e:	d1f7      	bne.n	8000820 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000830:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8000834:	4911      	ldr	r1, [pc, #68]	; (800087c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000836:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800083a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800083c:	f003 020c 	and.w	r2, r3, #12
 8000840:	2a08      	cmp	r2, #8
 8000842:	d117      	bne.n	8000874 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000844:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000848:	a806      	add	r0, sp, #24
 800084a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800084c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800084e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000852:	d50c      	bpl.n	800086e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000854:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000856:	480a      	ldr	r0, [pc, #40]	; (8000880 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000858:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800085c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800085e:	aa06      	add	r2, sp, #24
 8000860:	4413      	add	r3, r2
 8000862:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000866:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800086a:	b007      	add	sp, #28
 800086c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <HAL_RCC_GetSysClockFreq+0x70>)
 8000870:	4350      	muls	r0, r2
 8000872:	e7fa      	b.n	800086a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000876:	e7f8      	b.n	800086a <HAL_RCC_GetSysClockFreq+0x56>
 8000878:	080026bc 	.word	0x080026bc
 800087c:	40021000 	.word	0x40021000
 8000880:	007a1200 	.word	0x007a1200
 8000884:	003d0900 	.word	0x003d0900

08000888 <HAL_RCC_ClockConfig>:
{
 8000888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800088c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800088e:	4604      	mov	r4, r0
 8000890:	b910      	cbnz	r0, 8000898 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000892:	2001      	movs	r0, #1
}
 8000894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000898:	4a44      	ldr	r2, [pc, #272]	; (80009ac <HAL_RCC_ClockConfig+0x124>)
 800089a:	6813      	ldr	r3, [r2, #0]
 800089c:	f003 0307 	and.w	r3, r3, #7
 80008a0:	428b      	cmp	r3, r1
 80008a2:	d328      	bcc.n	80008f6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008a4:	6821      	ldr	r1, [r4, #0]
 80008a6:	078e      	lsls	r6, r1, #30
 80008a8:	d430      	bmi.n	800090c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008aa:	07ca      	lsls	r2, r1, #31
 80008ac:	d443      	bmi.n	8000936 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80008ae:	4a3f      	ldr	r2, [pc, #252]	; (80009ac <HAL_RCC_ClockConfig+0x124>)
 80008b0:	6813      	ldr	r3, [r2, #0]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	42ab      	cmp	r3, r5
 80008b8:	d865      	bhi.n	8000986 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008ba:	6822      	ldr	r2, [r4, #0]
 80008bc:	4d3c      	ldr	r5, [pc, #240]	; (80009b0 <HAL_RCC_ClockConfig+0x128>)
 80008be:	f012 0f04 	tst.w	r2, #4
 80008c2:	d16c      	bne.n	800099e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008c4:	0713      	lsls	r3, r2, #28
 80008c6:	d506      	bpl.n	80008d6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80008c8:	686b      	ldr	r3, [r5, #4]
 80008ca:	6922      	ldr	r2, [r4, #16]
 80008cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80008d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008d4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80008d6:	f7ff ff9d 	bl	8000814 <HAL_RCC_GetSysClockFreq>
 80008da:	686b      	ldr	r3, [r5, #4]
 80008dc:	4a35      	ldr	r2, [pc, #212]	; (80009b4 <HAL_RCC_ClockConfig+0x12c>)
 80008de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008e2:	5cd3      	ldrb	r3, [r2, r3]
 80008e4:	40d8      	lsrs	r0, r3
 80008e6:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <HAL_RCC_ClockConfig+0x130>)
 80008e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <HAL_RCC_ClockConfig+0x134>)
 80008ec:	6818      	ldr	r0, [r3, #0]
 80008ee:	f7ff fc37 	bl	8000160 <HAL_InitTick>
  return HAL_OK;
 80008f2:	2000      	movs	r0, #0
 80008f4:	e7ce      	b.n	8000894 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008f6:	6813      	ldr	r3, [r2, #0]
 80008f8:	f023 0307 	bic.w	r3, r3, #7
 80008fc:	430b      	orrs	r3, r1
 80008fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000900:	6813      	ldr	r3, [r2, #0]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	428b      	cmp	r3, r1
 8000908:	d1c3      	bne.n	8000892 <HAL_RCC_ClockConfig+0xa>
 800090a:	e7cb      	b.n	80008a4 <HAL_RCC_ClockConfig+0x1c>
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800090e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000912:	bf1e      	ittt	ne
 8000914:	685a      	ldrne	r2, [r3, #4]
 8000916:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800091a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800091c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800091e:	bf42      	ittt	mi
 8000920:	685a      	ldrmi	r2, [r3, #4]
 8000922:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000926:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	68a0      	ldr	r0, [r4, #8]
 800092c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000930:	4302      	orrs	r2, r0
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	e7b9      	b.n	80008aa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000936:	6862      	ldr	r2, [r4, #4]
 8000938:	4e1d      	ldr	r6, [pc, #116]	; (80009b0 <HAL_RCC_ClockConfig+0x128>)
 800093a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800093c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800093e:	d11a      	bne.n	8000976 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000940:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000944:	d0a5      	beq.n	8000892 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000946:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000948:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800094c:	f023 0303 	bic.w	r3, r3, #3
 8000950:	4313      	orrs	r3, r2
 8000952:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000954:	f7ff fc46 	bl	80001e4 <HAL_GetTick>
 8000958:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800095a:	6873      	ldr	r3, [r6, #4]
 800095c:	6862      	ldr	r2, [r4, #4]
 800095e:	f003 030c 	and.w	r3, r3, #12
 8000962:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000966:	d0a2      	beq.n	80008ae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000968:	f7ff fc3c 	bl	80001e4 <HAL_GetTick>
 800096c:	1bc0      	subs	r0, r0, r7
 800096e:	4540      	cmp	r0, r8
 8000970:	d9f3      	bls.n	800095a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8000972:	2003      	movs	r0, #3
 8000974:	e78e      	b.n	8000894 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000976:	2a02      	cmp	r2, #2
 8000978:	d102      	bne.n	8000980 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800097a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800097e:	e7e1      	b.n	8000944 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000980:	f013 0f02 	tst.w	r3, #2
 8000984:	e7de      	b.n	8000944 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000986:	6813      	ldr	r3, [r2, #0]
 8000988:	f023 0307 	bic.w	r3, r3, #7
 800098c:	432b      	orrs	r3, r5
 800098e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000990:	6813      	ldr	r3, [r2, #0]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	42ab      	cmp	r3, r5
 8000998:	f47f af7b 	bne.w	8000892 <HAL_RCC_ClockConfig+0xa>
 800099c:	e78d      	b.n	80008ba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800099e:	686b      	ldr	r3, [r5, #4]
 80009a0:	68e1      	ldr	r1, [r4, #12]
 80009a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009a6:	430b      	orrs	r3, r1
 80009a8:	606b      	str	r3, [r5, #4]
 80009aa:	e78b      	b.n	80008c4 <HAL_RCC_ClockConfig+0x3c>
 80009ac:	40022000 	.word	0x40022000
 80009b0:	40021000 	.word	0x40021000
 80009b4:	08002811 	.word	0x08002811
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004

080009c0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80009ca:	5cd3      	ldrb	r3, [r2, r3]
 80009cc:	4a03      	ldr	r2, [pc, #12]	; (80009dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009ce:	6810      	ldr	r0, [r2, #0]
}
 80009d0:	40d8      	lsrs	r0, r3
 80009d2:	4770      	bx	lr
 80009d4:	40021000 	.word	0x40021000
 80009d8:	08002821 	.word	0x08002821
 80009dc:	20000008 	.word	0x20000008

080009e0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009ea:	5cd3      	ldrb	r3, [r2, r3]
 80009ec:	4a03      	ldr	r2, [pc, #12]	; (80009fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009ee:	6810      	ldr	r0, [r2, #0]
}
 80009f0:	40d8      	lsrs	r0, r3
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000
 80009f8:	08002821 	.word	0x08002821
 80009fc:	20000008 	.word	0x20000008

08000a00 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a02:	4604      	mov	r4, r0
 8000a04:	460e      	mov	r6, r1
 8000a06:	4615      	mov	r5, r2
 8000a08:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000a0a:	6821      	ldr	r1, [r4, #0]
 8000a0c:	688a      	ldr	r2, [r1, #8]
 8000a0e:	ea36 0302 	bics.w	r3, r6, r2
 8000a12:	d001      	beq.n	8000a18 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000a14:	2000      	movs	r0, #0
 8000a16:	e02d      	b.n	8000a74 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8000a18:	1c6b      	adds	r3, r5, #1
 8000a1a:	d0f7      	beq.n	8000a0c <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000a1c:	f7ff fbe2 	bl	80001e4 <HAL_GetTick>
 8000a20:	1bc0      	subs	r0, r0, r7
 8000a22:	4285      	cmp	r5, r0
 8000a24:	d8f1      	bhi.n	8000a0a <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000a26:	6823      	ldr	r3, [r4, #0]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000a2e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000a30:	6862      	ldr	r2, [r4, #4]
 8000a32:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000a36:	d10a      	bne.n	8000a4e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
 8000a38:	68a2      	ldr	r2, [r4, #8]
 8000a3a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000a3e:	d002      	beq.n	8000a46 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000a40:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000a44:	d103      	bne.n	8000a4e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a4c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000a4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a50:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000a54:	d107      	bne.n	8000a66 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x66>
          SPI_RESET_CRC(hspi);
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a64:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000a66:	2301      	movs	r3, #1
 8000a68:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2003      	movs	r0, #3
 8000a70:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000a76 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8000a76:	b538      	push	{r3, r4, r5, lr}
 8000a78:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000a7a:	6842      	ldr	r2, [r0, #4]
{
 8000a7c:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000a7e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000a82:	d116      	bne.n	8000ab2 <SPI_EndRxTransaction+0x3c>
 8000a84:	6880      	ldr	r0, [r0, #8]
 8000a86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000a8a:	d002      	beq.n	8000a92 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000a8c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000a90:	d10f      	bne.n	8000ab2 <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8000a92:	6822      	ldr	r2, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8000a94:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8000a98:	6815      	ldr	r5, [r2, #0]
 8000a9a:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8000a9e:	6015      	str	r5, [r2, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8000aa0:	d107      	bne.n	8000ab2 <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8000aa2:	460a      	mov	r2, r1
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f7ff ffaa 	bl	8000a00 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8000aac:	b920      	cbnz	r0, 8000ab8 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8000aae:	2000      	movs	r0, #0
}
 8000ab0:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000ab2:	460a      	mov	r2, r1
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	e7f6      	b.n	8000aa6 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000ab8:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000aba:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000abc:	f043 0320 	orr.w	r3, r3, #32
 8000ac0:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000ac2:	e7f5      	b.n	8000ab0 <SPI_EndRxTransaction+0x3a>

08000ac4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000ac4:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	460a      	mov	r2, r1
 8000aca:	2180      	movs	r1, #128	; 0x80
{
 8000acc:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000ace:	f7ff ff97 	bl	8000a00 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8000ad2:	b120      	cbz	r0, 8000ade <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000ad4:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000ad6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000ade:	bd10      	pop	{r4, pc}

08000ae0 <HAL_SPI_Init>:
{
 8000ae0:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d034      	beq.n	8000b52 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000aec:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000af0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000af4:	b91b      	cbnz	r3, 8000afe <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000af6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000afa:	f001 f88f 	bl	8001c1c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000afe:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000b00:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000b02:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000b06:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000b08:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8000b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b0e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000b10:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8000b14:	4303      	orrs	r3, r0
 8000b16:	68e0      	ldr	r0, [r4, #12]
 8000b18:	4303      	orrs	r3, r0
 8000b1a:	6920      	ldr	r0, [r4, #16]
 8000b1c:	4303      	orrs	r3, r0
 8000b1e:	6960      	ldr	r0, [r4, #20]
 8000b20:	4303      	orrs	r3, r0
 8000b22:	69e0      	ldr	r0, [r4, #28]
 8000b24:	4303      	orrs	r3, r0
 8000b26:	6a20      	ldr	r0, [r4, #32]
 8000b28:	4303      	orrs	r3, r0
 8000b2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000b32:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000b34:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000b36:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000b3a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000b3c:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000b3e:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000b40:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000b42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b46:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000b48:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000b4a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000b4c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8000b50:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000b52:	2001      	movs	r0, #1
 8000b54:	e7fc      	b.n	8000b50 <HAL_SPI_Init+0x70>

08000b56 <HAL_SPI_Transmit>:
{
 8000b56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000b5a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000b5c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000b60:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000b62:	2b01      	cmp	r3, #1
{
 8000b64:	460d      	mov	r5, r1
 8000b66:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000b68:	f000 809c 	beq.w	8000ca4 <HAL_SPI_Transmit+0x14e>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000b72:	f7ff fb37 	bl	80001e4 <HAL_GetTick>
 8000b76:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000b78:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000b7c:	b2c0      	uxtb	r0, r0
 8000b7e:	2801      	cmp	r0, #1
 8000b80:	f040 808e 	bne.w	8000ca0 <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8000b84:	2d00      	cmp	r5, #0
 8000b86:	d05e      	beq.n	8000c46 <HAL_SPI_Transmit+0xf0>
 8000b88:	f1b8 0f00 	cmp.w	r8, #0
 8000b8c:	d05b      	beq.n	8000c46 <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000b8e:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000b90:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000b92:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000b96:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000b98:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000b9a:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000b9c:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000ba0:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000ba2:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8000ba4:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8000ba8:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8000bae:	bf08      	it	eq
 8000bb0:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000bb2:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8000bb4:	bf08      	it	eq
 8000bb6:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 8000bba:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000bbe:	bf08      	it	eq
 8000bc0:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000bc2:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000bc4:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000bc6:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8000bc8:	bf5e      	ittt	pl
 8000bca:	6803      	ldrpl	r3, [r0, #0]
 8000bcc:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8000bd0:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000bd2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000bd6:	6863      	ldr	r3, [r4, #4]
 8000bd8:	d13e      	bne.n	8000c58 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000bda:	b113      	cbz	r3, 8000be2 <HAL_SPI_Transmit+0x8c>
 8000bdc:	f1b8 0f01 	cmp.w	r8, #1
 8000be0:	d107      	bne.n	8000bf2 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000be2:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000be6:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000be8:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000bea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000bec:	3b01      	subs	r3, #1
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000bf2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	b9a3      	cbnz	r3, 8000c22 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000bf8:	463a      	mov	r2, r7
 8000bfa:	4631      	mov	r1, r6
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f7ff ff61 	bl	8000ac4 <SPI_EndRxTxTransaction>
 8000c02:	2800      	cmp	r0, #0
 8000c04:	d149      	bne.n	8000c9a <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000c06:	68a3      	ldr	r3, [r4, #8]
 8000c08:	b933      	cbnz	r3, 8000c18 <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	9201      	str	r2, [sp, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000c18:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000c1a:	3000      	adds	r0, #0
 8000c1c:	bf18      	it	ne
 8000c1e:	2001      	movne	r0, #1
error:
 8000c20:	e011      	b.n	8000c46 <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000c22:	6822      	ldr	r2, [r4, #0]
 8000c24:	6893      	ldr	r3, [r2, #8]
 8000c26:	0798      	lsls	r0, r3, #30
 8000c28:	d505      	bpl.n	8000c36 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c2c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000c30:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000c32:	6323      	str	r3, [r4, #48]	; 0x30
 8000c34:	e7d9      	b.n	8000bea <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000c36:	f7ff fad5 	bl	80001e4 <HAL_GetTick>
 8000c3a:	1bc0      	subs	r0, r0, r7
 8000c3c:	42b0      	cmp	r0, r6
 8000c3e:	d3d8      	bcc.n	8000bf2 <HAL_SPI_Transmit+0x9c>
 8000c40:	1c71      	adds	r1, r6, #1
 8000c42:	d0d6      	beq.n	8000bf2 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 8000c44:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000c46:	2301      	movs	r3, #1
 8000c48:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000c52:	b002      	add	sp, #8
 8000c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000c58:	b113      	cbz	r3, 8000c60 <HAL_SPI_Transmit+0x10a>
 8000c5a:	f1b8 0f01 	cmp.w	r8, #1
 8000c5e:	d108      	bne.n	8000c72 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000c60:	782b      	ldrb	r3, [r5, #0]
 8000c62:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000c64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c66:	3301      	adds	r3, #1
 8000c68:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000c6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000c72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0be      	beq.n	8000bf8 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	0792      	lsls	r2, r2, #30
 8000c80:	d503      	bpl.n	8000c8a <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000c82:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	731a      	strb	r2, [r3, #12]
 8000c88:	e7ec      	b.n	8000c64 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000c8a:	f7ff faab 	bl	80001e4 <HAL_GetTick>
 8000c8e:	1bc0      	subs	r0, r0, r7
 8000c90:	42b0      	cmp	r0, r6
 8000c92:	d3ee      	bcc.n	8000c72 <HAL_SPI_Transmit+0x11c>
 8000c94:	1c73      	adds	r3, r6, #1
 8000c96:	d0ec      	beq.n	8000c72 <HAL_SPI_Transmit+0x11c>
 8000c98:	e7d4      	b.n	8000c44 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	6563      	str	r3, [r4, #84]	; 0x54
 8000c9e:	e7b2      	b.n	8000c06 <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	e7d0      	b.n	8000c46 <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	e7d4      	b.n	8000c52 <HAL_SPI_Transmit+0xfc>

08000ca8 <HAL_SPI_TransmitReceive>:
{
 8000ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000cac:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000cae:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000cb2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000cb4:	2b01      	cmp	r3, #1
{
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	4691      	mov	r9, r2
 8000cba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000cbc:	f000 80e2 	beq.w	8000e84 <HAL_SPI_TransmitReceive+0x1dc>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000cc6:	f7ff fa8d 	bl	80001e4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8000cca:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000cce:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8000cd0:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000cd2:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8000cd4:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000cd6:	d00a      	beq.n	8000cee <HAL_SPI_TransmitReceive+0x46>
 8000cd8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000cdc:	f040 80d0 	bne.w	8000e80 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000ce0:	68a0      	ldr	r0, [r4, #8]
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	f040 80cc 	bne.w	8000e80 <HAL_SPI_TransmitReceive+0x1d8>
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	f040 80c9 	bne.w	8000e80 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	f000 80c4 	beq.w	8000e7c <HAL_SPI_TransmitReceive+0x1d4>
 8000cf4:	f1b9 0f00 	cmp.w	r9, #0
 8000cf8:	f000 80c0 	beq.w	8000e7c <HAL_SPI_TransmitReceive+0x1d4>
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	f000 80bd 	beq.w	8000e7c <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000d02:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000d06:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000d0a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2305      	movne	r3, #5
 8000d10:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8000d18:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000d1c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000d1e:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000d20:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000d22:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000d24:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000d26:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000d28:	bf58      	it	pl
 8000d2a:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000d2c:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000d2e:	bf58      	it	pl
 8000d30:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000d34:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000d36:	bf58      	it	pl
 8000d38:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000d3a:	68e2      	ldr	r2, [r4, #12]
 8000d3c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000d40:	d158      	bne.n	8000df4 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000d42:	b109      	cbz	r1, 8000d48 <HAL_SPI_TransmitReceive+0xa0>
 8000d44:	2e01      	cmp	r6, #1
 8000d46:	d107      	bne.n	8000d58 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000d48:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000d4c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000d4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000d50:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000d52:	3b01      	subs	r3, #1
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000d58:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	b9ab      	cbnz	r3, 8000d8c <HAL_SPI_TransmitReceive+0xe4>
 8000d60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	b993      	cbnz	r3, 8000d8c <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000d66:	4642      	mov	r2, r8
 8000d68:	4639      	mov	r1, r7
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	f7ff feaa 	bl	8000ac4 <SPI_EndRxTxTransaction>
 8000d70:	2800      	cmp	r0, #0
 8000d72:	f040 8081 	bne.w	8000e78 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000d76:	68a3      	ldr	r3, [r4, #8]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d132      	bne.n	8000de2 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	9001      	str	r0, [sp, #4]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	9201      	str	r2, [sp, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	9b01      	ldr	r3, [sp, #4]
 8000d8a:	e02a      	b.n	8000de2 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000d8c:	6822      	ldr	r2, [r4, #0]
 8000d8e:	6893      	ldr	r3, [r2, #8]
 8000d90:	0799      	lsls	r1, r3, #30
 8000d92:	d50d      	bpl.n	8000db0 <HAL_SPI_TransmitReceive+0x108>
 8000d94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	b153      	cbz	r3, 8000db0 <HAL_SPI_TransmitReceive+0x108>
 8000d9a:	b14d      	cbz	r5, 8000db0 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 8000d9c:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000d9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000da0:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000da4:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000da6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000da8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000daa:	3b01      	subs	r3, #1
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000db0:	6893      	ldr	r3, [r2, #8]
 8000db2:	07db      	lsls	r3, r3, #31
 8000db4:	d50c      	bpl.n	8000dd0 <HAL_SPI_TransmitReceive+0x128>
 8000db6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	b14b      	cbz	r3, 8000dd0 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 8000dbc:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000dbe:	68d2      	ldr	r2, [r2, #12]
 8000dc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000dc2:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8000dc6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000dc8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8000dd0:	f7ff fa08 	bl	80001e4 <HAL_GetTick>
 8000dd4:	eba0 0008 	sub.w	r0, r0, r8
 8000dd8:	4287      	cmp	r7, r0
 8000dda:	d8be      	bhi.n	8000d5a <HAL_SPI_TransmitReceive+0xb2>
 8000ddc:	1c7e      	adds	r6, r7, #1
 8000dde:	d0bc      	beq.n	8000d5a <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8000de0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000de2:	2301      	movs	r3, #1
 8000de4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000de8:	2300      	movs	r3, #0
 8000dea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000dee:	b003      	add	sp, #12
 8000df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000df4:	b109      	cbz	r1, 8000dfa <HAL_SPI_TransmitReceive+0x152>
 8000df6:	2e01      	cmp	r6, #1
 8000df8:	d108      	bne.n	8000e0c <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000dfa:	782a      	ldrb	r2, [r5, #0]
 8000dfc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000dfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e00:	3301      	adds	r3, #1
 8000e02:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000e04:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e06:	3b01      	subs	r3, #1
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000e0c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000e0e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	b91b      	cbnz	r3, 8000e1c <HAL_SPI_TransmitReceive+0x174>
 8000e14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0a4      	beq.n	8000d66 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000e1c:	6822      	ldr	r2, [r4, #0]
 8000e1e:	6893      	ldr	r3, [r2, #8]
 8000e20:	0798      	lsls	r0, r3, #30
 8000e22:	d50e      	bpl.n	8000e42 <HAL_SPI_TransmitReceive+0x19a>
 8000e24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	b15b      	cbz	r3, 8000e42 <HAL_SPI_TransmitReceive+0x19a>
 8000e2a:	b155      	cbz	r5, 8000e42 <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 8000e2c:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8000e2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8000e34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e36:	3301      	adds	r3, #1
 8000e38:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000e3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000e42:	6822      	ldr	r2, [r4, #0]
 8000e44:	6893      	ldr	r3, [r2, #8]
 8000e46:	07d9      	lsls	r1, r3, #31
 8000e48:	d50d      	bpl.n	8000e66 <HAL_SPI_TransmitReceive+0x1be>
 8000e4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	b153      	cbz	r3, 8000e66 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 8000e50:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000e52:	68d2      	ldr	r2, [r2, #12]
 8000e54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8000e58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000e5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e60:	3b01      	subs	r3, #1
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8000e66:	f7ff f9bd 	bl	80001e4 <HAL_GetTick>
 8000e6a:	eba0 0008 	sub.w	r0, r0, r8
 8000e6e:	4287      	cmp	r7, r0
 8000e70:	d8cd      	bhi.n	8000e0e <HAL_SPI_TransmitReceive+0x166>
 8000e72:	1c7b      	adds	r3, r7, #1
 8000e74:	d0cb      	beq.n	8000e0e <HAL_SPI_TransmitReceive+0x166>
 8000e76:	e7b3      	b.n	8000de0 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000e78:	2320      	movs	r3, #32
 8000e7a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	e7b0      	b.n	8000de2 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8000e80:	2002      	movs	r0, #2
 8000e82:	e7ae      	b.n	8000de2 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8000e84:	2002      	movs	r0, #2
 8000e86:	e7b2      	b.n	8000dee <HAL_SPI_TransmitReceive+0x146>

08000e88 <HAL_SPI_Receive>:
{
 8000e88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000e8c:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000e8e:	6843      	ldr	r3, [r0, #4]
{
 8000e90:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8000e96:	4688      	mov	r8, r1
 8000e98:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000e9a:	d10c      	bne.n	8000eb6 <HAL_SPI_Receive+0x2e>
 8000e9c:	6883      	ldr	r3, [r0, #8]
 8000e9e:	b953      	cbnz	r3, 8000eb6 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	9500      	str	r5, [sp, #0]
 8000eaa:	460a      	mov	r2, r1
 8000eac:	f7ff fefc 	bl	8000ca8 <HAL_SPI_TransmitReceive>
}
 8000eb0:	b002      	add	sp, #8
 8000eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8000eb6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d07b      	beq.n	8000fb6 <HAL_SPI_Receive+0x12e>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000ec4:	f7ff f98e 	bl	80001e4 <HAL_GetTick>
 8000ec8:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000eca:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000ece:	b2c0      	uxtb	r0, r0
 8000ed0:	2801      	cmp	r0, #1
 8000ed2:	d16e      	bne.n	8000fb2 <HAL_SPI_Receive+0x12a>
  if ((pData == NULL) || (Size == 0U))
 8000ed4:	f1b8 0f00 	cmp.w	r8, #0
 8000ed8:	d059      	beq.n	8000f8e <HAL_SPI_Receive+0x106>
 8000eda:	2f00      	cmp	r7, #0
 8000edc:	d057      	beq.n	8000f8e <HAL_SPI_Receive+0x106>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ee4:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ee6:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ee8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8000eea:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8000eec:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8000eee:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8000ef0:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 8000ef2:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 8000ef6:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ef8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 8000efc:	bf08      	it	eq
 8000efe:	681a      	ldreq	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000f00:	87a7      	strh	r7, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 8000f02:	bf08      	it	eq
 8000f04:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8000f08:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 8000f0c:	bf08      	it	eq
 8000f0e:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f14:	bf5e      	ittt	pl
 8000f16:	681a      	ldrpl	r2, [r3, #0]
 8000f18:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000f1c:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8000f1e:	68e3      	ldr	r3, [r4, #12]
 8000f20:	b1f3      	cbz	r3, 8000f60 <HAL_SPI_Receive+0xd8>
    while (hspi->RxXferCount > 0U)
 8000f22:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	b1fb      	cbz	r3, 8000f68 <HAL_SPI_Receive+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	d535      	bpl.n	8000f9c <HAL_SPI_Receive+0x114>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f34:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8000f38:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000f3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000f42:	e7ee      	b.n	8000f22 <HAL_SPI_Receive+0x9a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	07d0      	lsls	r0, r2, #31
 8000f4a:	d518      	bpl.n	8000f7e <HAL_SPI_Receive+0xf6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8000f4c:	7b1b      	ldrb	r3, [r3, #12]
 8000f4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f50:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8000f52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f54:	3301      	adds	r3, #1
 8000f56:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000f58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8000f60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1ed      	bne.n	8000f44 <HAL_SPI_Receive+0xbc>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000f68:	4632      	mov	r2, r6
 8000f6a:	4629      	mov	r1, r5
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff fd82 	bl	8000a76 <SPI_EndRxTransaction>
 8000f72:	b9d8      	cbnz	r0, 8000fac <HAL_SPI_Receive+0x124>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000f74:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000f76:	3000      	adds	r0, #0
 8000f78:	bf18      	it	ne
 8000f7a:	2001      	movne	r0, #1
error :
 8000f7c:	e007      	b.n	8000f8e <HAL_SPI_Receive+0x106>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000f7e:	f7ff f931 	bl	80001e4 <HAL_GetTick>
 8000f82:	1b80      	subs	r0, r0, r6
 8000f84:	42a8      	cmp	r0, r5
 8000f86:	d3eb      	bcc.n	8000f60 <HAL_SPI_Receive+0xd8>
 8000f88:	1c69      	adds	r1, r5, #1
 8000f8a:	d0e9      	beq.n	8000f60 <HAL_SPI_Receive+0xd8>
          errorcode = HAL_TIMEOUT;
 8000f8c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000f94:	2300      	movs	r3, #0
 8000f96:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8000f9a:	e789      	b.n	8000eb0 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000f9c:	f7ff f922 	bl	80001e4 <HAL_GetTick>
 8000fa0:	1b80      	subs	r0, r0, r6
 8000fa2:	42a8      	cmp	r0, r5
 8000fa4:	d3bd      	bcc.n	8000f22 <HAL_SPI_Receive+0x9a>
 8000fa6:	1c6b      	adds	r3, r5, #1
 8000fa8:	d0bb      	beq.n	8000f22 <HAL_SPI_Receive+0x9a>
 8000faa:	e7ef      	b.n	8000f8c <HAL_SPI_Receive+0x104>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000fac:	2320      	movs	r3, #32
 8000fae:	6563      	str	r3, [r4, #84]	; 0x54
 8000fb0:	e7e0      	b.n	8000f74 <HAL_SPI_Receive+0xec>
    errorcode = HAL_BUSY;
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	e7eb      	b.n	8000f8e <HAL_SPI_Receive+0x106>
  __HAL_LOCK(hspi);
 8000fb6:	2002      	movs	r0, #2
 8000fb8:	e77a      	b.n	8000eb0 <HAL_SPI_Receive+0x28>
	...

08000fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000fc0:	6803      	ldr	r3, [r0, #0]
 8000fc2:	68c1      	ldr	r1, [r0, #12]
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	2419      	movs	r4, #25
 8000fc8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000fd0:	6882      	ldr	r2, [r0, #8]
 8000fd2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000fd4:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000fd6:	4302      	orrs	r2, r0
 8000fd8:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000fda:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000fde:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000fe2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000fe8:	695a      	ldr	r2, [r3, #20]
 8000fea:	69a9      	ldr	r1, [r5, #24]
 8000fec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <UART_SetConfig+0x70>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d114      	bne.n	8001024 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000ffa:	f7ff fcf1 	bl	80009e0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000ffe:	4360      	muls	r0, r4
 8001000:	686c      	ldr	r4, [r5, #4]
 8001002:	2264      	movs	r2, #100	; 0x64
 8001004:	00a4      	lsls	r4, r4, #2
 8001006:	fbb0 f0f4 	udiv	r0, r0, r4
 800100a:	fbb0 f1f2 	udiv	r1, r0, r2
 800100e:	fb02 0311 	mls	r3, r2, r1, r0
 8001012:	011b      	lsls	r3, r3, #4
 8001014:	3332      	adds	r3, #50	; 0x32
 8001016:	fbb3 f3f2 	udiv	r3, r3, r2
 800101a:	682c      	ldr	r4, [r5, #0]
 800101c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001020:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8001022:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001024:	f7ff fccc 	bl	80009c0 <HAL_RCC_GetPCLK1Freq>
 8001028:	e7e9      	b.n	8000ffe <UART_SetConfig+0x42>
 800102a:	bf00      	nop
 800102c:	40013800 	.word	0x40013800

08001030 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001032:	4604      	mov	r4, r0
 8001034:	460e      	mov	r6, r1
 8001036:	4617      	mov	r7, r2
 8001038:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800103a:	6821      	ldr	r1, [r4, #0]
 800103c:	680b      	ldr	r3, [r1, #0]
 800103e:	ea36 0303 	bics.w	r3, r6, r3
 8001042:	d101      	bne.n	8001048 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001044:	2000      	movs	r0, #0
 8001046:	e014      	b.n	8001072 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8001048:	1c6b      	adds	r3, r5, #1
 800104a:	d0f7      	beq.n	800103c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800104c:	b995      	cbnz	r5, 8001074 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800104e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001050:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001058:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800105a:	695a      	ldr	r2, [r3, #20]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001062:	2320      	movs	r3, #32
 8001064:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001068:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800106c:	2300      	movs	r3, #0
 800106e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8001072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001074:	f7ff f8b6 	bl	80001e4 <HAL_GetTick>
 8001078:	1bc0      	subs	r0, r0, r7
 800107a:	4285      	cmp	r5, r0
 800107c:	d2dd      	bcs.n	800103a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800107e:	e7e6      	b.n	800104e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001080 <HAL_UART_Init>:
{
 8001080:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001082:	4604      	mov	r4, r0
 8001084:	b340      	cbz	r0, 80010d8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001086:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800108a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800108e:	b91b      	cbnz	r3, 8001098 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001090:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001094:	f000 fdfc 	bl	8001c90 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001098:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800109a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800109c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80010a0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80010a2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80010a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010a8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80010aa:	f7ff ff87 	bl	8000fbc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010ae:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010b0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80010b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010ba:	695a      	ldr	r2, [r3, #20]
 80010bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80010c0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010c8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80010ca:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010cc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80010ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80010d2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80010d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010d8:	2001      	movs	r0, #1
 80010da:	e7fc      	b.n	80010d6 <HAL_UART_Init+0x56>

080010dc <HAL_UART_Transmit>:
{
 80010dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010e0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80010e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80010e6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80010e8:	2b20      	cmp	r3, #32
{
 80010ea:	460d      	mov	r5, r1
 80010ec:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80010ee:	d14c      	bne.n	800118a <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 80010f0:	2900      	cmp	r1, #0
 80010f2:	d048      	beq.n	8001186 <HAL_UART_Transmit+0xaa>
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	d046      	beq.n	8001186 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80010f8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d044      	beq.n	800118a <HAL_UART_Transmit+0xae>
 8001100:	2301      	movs	r3, #1
 8001102:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001106:	2300      	movs	r3, #0
 8001108:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800110a:	2321      	movs	r3, #33	; 0x21
 800110c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001110:	f7ff f868 	bl	80001e4 <HAL_GetTick>
 8001114:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001116:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800111a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800111e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001120:	b29b      	uxth	r3, r3
 8001122:	b963      	cbnz	r3, 800113e <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	4632      	mov	r2, r6
 8001128:	2140      	movs	r1, #64	; 0x40
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff ff80 	bl	8001030 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001130:	b9a0      	cbnz	r0, 800115c <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001132:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001134:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001138:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800113c:	e00f      	b.n	800115e <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800113e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001140:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001142:	3b01      	subs	r3, #1
 8001144:	b29b      	uxth	r3, r3
 8001146:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001148:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800114a:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800114c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001150:	4620      	mov	r0, r4
 8001152:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001154:	d10e      	bne.n	8001174 <HAL_UART_Transmit+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001156:	f7ff ff6b 	bl	8001030 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800115a:	b110      	cbz	r0, 8001162 <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 800115c:	2003      	movs	r0, #3
}
 800115e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001162:	882b      	ldrh	r3, [r5, #0]
 8001164:	6822      	ldr	r2, [r4, #0]
 8001166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800116a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800116c:	6923      	ldr	r3, [r4, #16]
 800116e:	b943      	cbnz	r3, 8001182 <HAL_UART_Transmit+0xa6>
          pData += 2U;
 8001170:	3502      	adds	r5, #2
 8001172:	e7d4      	b.n	800111e <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001174:	f7ff ff5c 	bl	8001030 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001178:	2800      	cmp	r0, #0
 800117a:	d1ef      	bne.n	800115c <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	782a      	ldrb	r2, [r5, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	3501      	adds	r5, #1
 8001184:	e7cb      	b.n	800111e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001186:	2001      	movs	r0, #1
 8001188:	e7e9      	b.n	800115e <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800118a:	2002      	movs	r0, #2
 800118c:	e7e7      	b.n	800115e <HAL_UART_Transmit+0x82>
	...

08001190 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin	== IRQ_Pin)
 8001190:	2804      	cmp	r0, #4
{
 8001192:	4602      	mov	r2, r0
	if(GPIO_Pin	== IRQ_Pin)
 8001194:	d105      	bne.n	80011a2 <HAL_GPIO_EXTI_Callback+0x12>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"IRQ\n", strlen("IRQ\n"), 1000);
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	4902      	ldr	r1, [pc, #8]	; (80011a4 <HAL_GPIO_EXTI_Callback+0x14>)
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <HAL_GPIO_EXTI_Callback+0x18>)
 800119e:	f7ff bf9d 	b.w	80010dc <HAL_UART_Transmit>
	}
}
 80011a2:	4770      	bx	lr
 80011a4:	080026cc 	.word	0x080026cc
 80011a8:	200000a4 	.word	0x200000a4

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	2414      	movs	r4, #20
{
 80011b0:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	4622      	mov	r2, r4
 80011b4:	2100      	movs	r1, #0
 80011b6:	a808      	add	r0, sp, #32
 80011b8:	f000 fe4f 	bl	8001e5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	4622      	mov	r2, r4
 80011be:	2100      	movs	r1, #0
 80011c0:	a801      	add	r0, sp, #4
 80011c2:	f000 fe4a 	bl	8001e5a <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d2:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011da:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011dc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011de:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f7ff f97a 	bl	80004d8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ee:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f0:	4621      	mov	r1, r4
 80011f2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f4:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f8:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011fa:	f7ff fb45 	bl	8000888 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80011fe:	b010      	add	sp, #64	; 0x40
 8001200:	bd10      	pop	{r4, pc}
 8001202:	0000      	movs	r0, r0
 8001204:	0000      	movs	r0, r0
	...

08001208 <main>:
{
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120a:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 800120c:	f7fe ffcc 	bl	80001a8 <HAL_Init>
  SystemClock_Config();
 8001210:	f7ff ffcc 	bl	80011ac <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	2210      	movs	r2, #16
 8001216:	2100      	movs	r1, #0
 8001218:	a80e      	add	r0, sp, #56	; 0x38
 800121a:	f000 fe1e 	bl	8001e5a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4bc2      	ldr	r3, [pc, #776]	; (8001528 <main+0x320>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ledpb11_GPIO_Port, ledpb11_Pin, GPIO_PIN_RESET);
 8001220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001224:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(ledpb11_GPIO_Port, ledpb11_Pin, GPIO_PIN_RESET);
 8001226:	48c1      	ldr	r0, [pc, #772]	; (800152c <main+0x324>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001228:	f042 0210 	orr.w	r2, r2, #16
 800122c:	619a      	str	r2, [r3, #24]
 800122e:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : ledpb11_Pin */
  GPIO_InitStruct.Pin = ledpb11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	f002 0210 	and.w	r2, r2, #16
 8001236:	9203      	str	r2, [sp, #12]
 8001238:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123e:	f042 0220 	orr.w	r2, r2, #32
 8001242:	619a      	str	r2, [r3, #24]
 8001244:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001248:	f002 0220 	and.w	r2, r2, #32
 800124c:	9204      	str	r2, [sp, #16]
 800124e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8001252:	2418      	movs	r4, #24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	f042 0204 	orr.w	r2, r2, #4
 8001258:	619a      	str	r2, [r3, #24]
 800125a:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(ledpb11_GPIO_Port, ledpb11_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	9305      	str	r3, [sp, #20]
 8001264:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(ledpb11_GPIO_Port, ledpb11_Pin, GPIO_PIN_RESET);
 8001266:	f7ff f91f 	bl	80004a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2118      	movs	r1, #24
 800126e:	48b0      	ldr	r0, [pc, #704]	; (8001530 <main+0x328>)
 8001270:	f7ff f91a 	bl	80004a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(ledpb11_GPIO_Port, &GPIO_InitStruct);
 8001278:	a90e      	add	r1, sp, #56	; 0x38
 800127a:	48ac      	ldr	r0, [pc, #688]	; (800152c <main+0x324>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(ledpb11_GPIO_Port, &GPIO_InitStruct);
 8001284:	f7ff f830 	bl	80002e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001288:	2204      	movs	r2, #4
 800128a:	4baa      	ldr	r3, [pc, #680]	; (8001534 <main+0x32c>)
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800128c:	a90e      	add	r1, sp, #56	; 0x38
 800128e:	48a8      	ldr	r0, [pc, #672]	; (8001530 <main+0x328>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001290:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8001296:	f7ff f827 	bl	80002e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	a90e      	add	r1, sp, #56	; 0x38
 800129c:	48a4      	ldr	r0, [pc, #656]	; (8001530 <main+0x328>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	e9cd 470e 	strd	r4, r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f7ff f81f 	bl	80002e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 80012aa:	462a      	mov	r2, r5
 80012ac:	2107      	movs	r1, #7
 80012ae:	2008      	movs	r0, #8
 80012b0:	f7fe ffc2 	bl	8000238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80012b4:	2008      	movs	r0, #8
 80012b6:	f7fe fff3 	bl	80002a0 <HAL_NVIC_EnableIRQ>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ba:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 80012be:	489e      	ldr	r0, [pc, #632]	; (8001538 <main+0x330>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012c0:	499e      	ldr	r1, [pc, #632]	; (800153c <main+0x334>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c2:	e9c0 5502 	strd	r5, r5, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012c6:	e9c0 1300 	strd	r1, r3, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ca:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012ce:	e9c0 3406 	strd	r3, r4, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80012d2:	230a      	movs	r3, #10
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d4:	e9c0 5504 	strd	r5, r5, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d8:	e9c0 5508 	strd	r5, r5, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012dc:	6285      	str	r5, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012de:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012e0:	f7ff fbfe 	bl	8000ae0 <HAL_SPI_Init>
  huart1.Init.BaudRate = 115200;
 80012e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e8:	260c      	movs	r6, #12
  huart1.Instance = USART1;
 80012ea:	4c95      	ldr	r4, [pc, #596]	; (8001540 <main+0x338>)
  huart1.Init.BaudRate = 115200;
 80012ec:	4895      	ldr	r0, [pc, #596]	; (8001544 <main+0x33c>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012ee:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.BaudRate = 115200;
 80012f2:	e9c4 0300 	strd	r0, r3, [r4]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f6:	4620      	mov	r0, r4
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f8:	6125      	str	r5, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	e9c4 6505 	strd	r6, r5, [r4, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fe:	61e5      	str	r5, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001300:	f7ff febe 	bl	8001080 <HAL_UART_Init>
  DWT_Init(); // счётчик для микросекундных пауз
 8001304:	f000 f97e 	bl	8001604 <DWT_Init>
  uint8_t res = isChipConnected(); // проверяет подключён ли модуль к SPI
 8001308:	f000 fae8 	bl	80018dc <isChipConnected>
  char str[64] = {0,};
 800130c:	4629      	mov	r1, r5
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	a80e      	add	r0, sp, #56	; 0x38
 8001312:	f000 fda2 	bl	8001e5a <memset>
  snprintf(str, 64, "Connected: %s\n", 1 ? "OK" : "NOT OK");
 8001316:	4b8c      	ldr	r3, [pc, #560]	; (8001548 <main+0x340>)
 8001318:	4a8c      	ldr	r2, [pc, #560]	; (800154c <main+0x344>)
 800131a:	2140      	movs	r1, #64	; 0x40
 800131c:	a80e      	add	r0, sp, #56	; 0x38
 800131e:	f000 fda5 	bl	8001e6c <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8001322:	a80e      	add	r0, sp, #56	; 0x38
 8001324:	f7fe ff14 	bl	8000150 <strlen>
 8001328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132c:	b282      	uxth	r2, r0
 800132e:	a90e      	add	r1, sp, #56	; 0x38
 8001330:	4620      	mov	r0, r4
 8001332:	f7ff fed3 	bl	80010dc <HAL_UART_Transmit>
  res = NRF_Init(); // инициализация
 8001336:	f000 fbcd 	bl	8001ad4 <NRF_Init>
  snprintf(str, 64, "Init: %s\n", res > 0 && res < 255 ? "OK" : "NOT OK");
 800133a:	4a83      	ldr	r2, [pc, #524]	; (8001548 <main+0x340>)
 800133c:	3801      	subs	r0, #1
 800133e:	4b84      	ldr	r3, [pc, #528]	; (8001550 <main+0x348>)
 8001340:	b2c0      	uxtb	r0, r0
 8001342:	28fd      	cmp	r0, #253	; 0xfd
 8001344:	bf98      	it	ls
 8001346:	4613      	movls	r3, r2
 8001348:	2140      	movs	r1, #64	; 0x40
 800134a:	4a82      	ldr	r2, [pc, #520]	; (8001554 <main+0x34c>)
 800134c:	a80e      	add	r0, sp, #56	; 0x38
 800134e:	f000 fd8d 	bl	8001e6c <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8001352:	a80e      	add	r0, sp, #56	; 0x38
 8001354:	f7fe fefc 	bl	8000150 <strlen>
 8001358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135c:	b282      	uxth	r2, r0
 800135e:	a90e      	add	r1, sp, #56	; 0x38
 8001360:	4620      	mov	r0, r4
 8001362:	f7ff febb 	bl	80010dc <HAL_UART_Transmit>
  enableAckPayload();
 8001366:	f000 fb55 	bl	8001a14 <enableAckPayload>
  setChannel(19);
 800136a:	2013      	movs	r0, #19
 800136c:	f000 faa9 	bl	80018c2 <setChannel>
  openWritingPipe(pipe1);
 8001370:	a16b      	add	r1, pc, #428	; (adr r1, 8001520 <main+0x318>)
 8001372:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001376:	f000 fb15 	bl	80019a4 <openWritingPipe>
  uint8_t status = get_status();
 800137a:	f000 fa9f 	bl	80018bc <get_status>
  snprintf(str, 64, "get_status: 0x%02x\n", status);
 800137e:	4a76      	ldr	r2, [pc, #472]	; (8001558 <main+0x350>)
 8001380:	4603      	mov	r3, r0
 8001382:	2140      	movs	r1, #64	; 0x40
 8001384:	a80e      	add	r0, sp, #56	; 0x38
 8001386:	f000 fd71 	bl	8001e6c <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800138a:	a80e      	add	r0, sp, #56	; 0x38
 800138c:	f7fe fee0 	bl	8000150 <strlen>
 8001390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001394:	b282      	uxth	r2, r0
 8001396:	a90e      	add	r1, sp, #56	; 0x38
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff fe9f 	bl	80010dc <HAL_UART_Transmit>
  status = getPALevel();
 800139e:	f000 fb70 	bl	8001a82 <getPALevel>
  snprintf(str, 64, "getPALevel: 0x%02x  ", status);
 80013a2:	4a6e      	ldr	r2, [pc, #440]	; (800155c <main+0x354>)
 80013a4:	4603      	mov	r3, r0
 80013a6:	2140      	movs	r1, #64	; 0x40
  status = getPALevel();
 80013a8:	4605      	mov	r5, r0
  snprintf(str, 64, "getPALevel: 0x%02x  ", status);
 80013aa:	a80e      	add	r0, sp, #56	; 0x38
 80013ac:	f000 fd5e 	bl	8001e6c <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80013b0:	a80e      	add	r0, sp, #56	; 0x38
 80013b2:	f7fe fecd 	bl	8000150 <strlen>
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	b282      	uxth	r2, r0
 80013bc:	a90e      	add	r1, sp, #56	; 0x38
 80013be:	4620      	mov	r0, r4
 80013c0:	f7ff fe8c 	bl	80010dc <HAL_UART_Transmit>
  if(status == 0x00)
 80013c4:	2d00      	cmp	r5, #0
 80013c6:	f040 80dd 	bne.w	8001584 <main+0x37c>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MIN\n", strlen("RF24_PA_MIN\n"), 1000);
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	4632      	mov	r2, r6
 80013d0:	4963      	ldr	r1, [pc, #396]	; (8001560 <main+0x358>)
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MAX\n", strlen("RF24_PA_MAX\n"), 1000);
 80013d2:	4620      	mov	r0, r4
 80013d4:	f7ff fe82 	bl	80010dc <HAL_UART_Transmit>
  status = getChannel();
 80013d8:	f000 fa77 	bl	80018ca <getChannel>
  snprintf(str, 64, "getChannel: 0x%02x № %d\n", status, status);
 80013dc:	4a61      	ldr	r2, [pc, #388]	; (8001564 <main+0x35c>)
  status = getChannel();
 80013de:	4603      	mov	r3, r0
  snprintf(str, 64, "getChannel: 0x%02x № %d\n", status, status);
 80013e0:	2140      	movs	r1, #64	; 0x40
 80013e2:	9000      	str	r0, [sp, #0]
 80013e4:	a80e      	add	r0, sp, #56	; 0x38
 80013e6:	f000 fd41 	bl	8001e6c <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80013ea:	a80e      	add	r0, sp, #56	; 0x38
 80013ec:	f7fe feb0 	bl	8000150 <strlen>
 80013f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f4:	b282      	uxth	r2, r0
 80013f6:	a90e      	add	r1, sp, #56	; 0x38
 80013f8:	4851      	ldr	r0, [pc, #324]	; (8001540 <main+0x338>)
 80013fa:	f7ff fe6f 	bl	80010dc <HAL_UART_Transmit>
  status = getDataRate();
 80013fe:	f000 fbcb 	bl	8001b98 <getDataRate>
  snprintf(str, 64, "getDataRate: 0x%02x  ", status);
 8001402:	4a59      	ldr	r2, [pc, #356]	; (8001568 <main+0x360>)
 8001404:	4603      	mov	r3, r0
 8001406:	2140      	movs	r1, #64	; 0x40
  status = getDataRate();
 8001408:	4604      	mov	r4, r0
  snprintf(str, 64, "getDataRate: 0x%02x  ", status);
 800140a:	a80e      	add	r0, sp, #56	; 0x38
 800140c:	f000 fd2e 	bl	8001e6c <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8001410:	a80e      	add	r0, sp, #56	; 0x38
 8001412:	f7fe fe9d 	bl	8000150 <strlen>
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	b282      	uxth	r2, r0
 800141c:	a90e      	add	r1, sp, #56	; 0x38
 800141e:	4848      	ldr	r0, [pc, #288]	; (8001540 <main+0x338>)
 8001420:	f7ff fe5c 	bl	80010dc <HAL_UART_Transmit>
  if(status == 0x02)
 8001424:	2c02      	cmp	r4, #2
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_250KBPS\n", strlen("RF24_250KBPS\n"), 1000);
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if(status == 0x02)
 800142a:	f040 80c1 	bne.w	80015b0 <main+0x3a8>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_250KBPS\n", strlen("RF24_250KBPS\n"), 1000);
 800142e:	220d      	movs	r2, #13
 8001430:	494e      	ldr	r1, [pc, #312]	; (800156c <main+0x364>)
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_1MBPS\n", strlen("RF24_1MBPS\n"), 1000);
 8001432:	4843      	ldr	r0, [pc, #268]	; (8001540 <main+0x338>)
 8001434:	f7ff fe52 	bl	80010dc <HAL_UART_Transmit>
  status = getPayloadSize();
 8001438:	f000 fa4a 	bl	80018d0 <getPayloadSize>
  snprintf(str, 64, "getPayloadSize: %d\n", status);
 800143c:	4a4c      	ldr	r2, [pc, #304]	; (8001570 <main+0x368>)
 800143e:	4603      	mov	r3, r0
 8001440:	2140      	movs	r1, #64	; 0x40
 8001442:	a80e      	add	r0, sp, #56	; 0x38
 8001444:	f000 fd12 	bl	8001e6c <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8001448:	a80e      	add	r0, sp, #56	; 0x38
 800144a:	f7fe fe81 	bl	8000150 <strlen>
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	b282      	uxth	r2, r0
 8001454:	a90e      	add	r1, sp, #56	; 0x38
 8001456:	483a      	ldr	r0, [pc, #232]	; (8001540 <main+0x338>)
 8001458:	f7ff fe40 	bl	80010dc <HAL_UART_Transmit>
  status = getCRCLength();
 800145c:	f000 fbab 	bl	8001bb6 <getCRCLength>
  snprintf(str, 64, "getCRCLength: 0x%02x  ", status);
 8001460:	4a44      	ldr	r2, [pc, #272]	; (8001574 <main+0x36c>)
 8001462:	4603      	mov	r3, r0
 8001464:	2140      	movs	r1, #64	; 0x40
  status = getCRCLength();
 8001466:	4604      	mov	r4, r0
  snprintf(str, 64, "getCRCLength: 0x%02x  ", status);
 8001468:	a80e      	add	r0, sp, #56	; 0x38
 800146a:	f000 fcff 	bl	8001e6c <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800146e:	a80e      	add	r0, sp, #56	; 0x38
 8001470:	f7fe fe6e 	bl	8000150 <strlen>
 8001474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001478:	b282      	uxth	r2, r0
 800147a:	a90e      	add	r1, sp, #56	; 0x38
 800147c:	4830      	ldr	r0, [pc, #192]	; (8001540 <main+0x338>)
 800147e:	f7ff fe2d 	bl	80010dc <HAL_UART_Transmit>
  if(status == 0x00)
 8001482:	2c00      	cmp	r4, #0
 8001484:	f040 809b 	bne.w	80015be <main+0x3b6>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_DISABLED\n", strlen("RF24_CRC_DISABLED\n"), 1000);
 8001488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148c:	2212      	movs	r2, #18
 800148e:	493a      	ldr	r1, [pc, #232]	; (8001578 <main+0x370>)
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_16\n", strlen("RF24_CRC_16\n"), 1000);
 8001490:	482b      	ldr	r0, [pc, #172]	; (8001540 <main+0x338>)
 8001492:	f7ff fe23 	bl	80010dc <HAL_UART_Transmit>
  maskIRQ(true, true, true); // маскируем прерывания
 8001496:	2201      	movs	r2, #1
 8001498:	4611      	mov	r1, r2
 800149a:	4610      	mov	r0, r2
 800149c:	f000 fa64 	bl	8001968 <maskIRQ>
	  uint8_t nrf_data[32] = {0,}; // буфер указываем максимального размера
 80014a0:	2400      	movs	r4, #0
	  else HAL_UART_Transmit(&huart1, (uint8_t*)"Not write\n", strlen("Not write\n"), 1000);
 80014a2:	4d36      	ldr	r5, [pc, #216]	; (800157c <main+0x374>)
			HAL_GPIO_TogglePin(ledpb11_GPIO_Port, ledpb11_Pin);
 80014a4:	4e21      	ldr	r6, [pc, #132]	; (800152c <main+0x324>)
	  uint8_t nrf_data[32] = {0,}; // буфер указываем максимального размера
 80014a6:	2100      	movs	r1, #0
 80014a8:	221e      	movs	r2, #30
 80014aa:	f10d 001a 	add.w	r0, sp, #26
 80014ae:	f000 fcd4 	bl	8001e5a <memset>
	  nrf_data[0] = 77;
 80014b2:	f245 634d 	movw	r3, #22093	; 0x564d
 80014b6:	f8ad 3018 	strh.w	r3, [sp, #24]
	  nrf_data[1] = 86;
 80014ba:	2361      	movs	r3, #97	; 0x61
	  if(write(&nrf_data, strlen((const char*)nrf_data))) // отправляем данные
 80014bc:	a806      	add	r0, sp, #24
	  nrf_data[1] = 86;
 80014be:	f88d 301a 	strb.w	r3, [sp, #26]
	  uint8_t remsg = 0; // переменная для приёма байта пришедшего вместе с ответом
 80014c2:	f88d 400b 	strb.w	r4, [sp, #11]
	  if(write(&nrf_data, strlen((const char*)nrf_data))) // отправляем данные
 80014c6:	f7fe fe43 	bl	8000150 <strlen>
 80014ca:	b2c1      	uxtb	r1, r0
 80014cc:	a806      	add	r0, sp, #24
 80014ce:	f000 fa32 	bl	8001936 <write>
 80014d2:	2800      	cmp	r0, #0
 80014d4:	f000 8082 	beq.w	80015dc <main+0x3d4>
		if(isAckPayloadAvailable()) // проверяем пришло ли что-то вместе с ответом
 80014d8:	f000 fab6 	bl	8001a48 <isAckPayloadAvailable>
 80014dc:	b1d0      	cbz	r0, 8001514 <main+0x30c>
			read(&remsg, sizeof(remsg));
 80014de:	2101      	movs	r1, #1
 80014e0:	f10d 000b 	add.w	r0, sp, #11
 80014e4:	f000 fa55 	bl	8001992 <read>
			HAL_GPIO_TogglePin(ledpb11_GPIO_Port, ledpb11_Pin);
 80014e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ec:	4630      	mov	r0, r6
 80014ee:	f7fe ffe0 	bl	80004b2 <HAL_GPIO_TogglePin>
			snprintf(str, 64, "Ack: %d\n", remsg);
 80014f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80014f6:	4a22      	ldr	r2, [pc, #136]	; (8001580 <main+0x378>)
 80014f8:	2140      	movs	r1, #64	; 0x40
 80014fa:	a80e      	add	r0, sp, #56	; 0x38
 80014fc:	f000 fcb6 	bl	8001e6c <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8001500:	a80e      	add	r0, sp, #56	; 0x38
 8001502:	f7fe fe25 	bl	8000150 <strlen>
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	b282      	uxth	r2, r0
 800150c:	a90e      	add	r1, sp, #56	; 0x38
	  else HAL_UART_Transmit(&huart1, (uint8_t*)"Not write\n", strlen("Not write\n"), 1000);
 800150e:	480c      	ldr	r0, [pc, #48]	; (8001540 <main+0x338>)
 8001510:	f7ff fde4 	bl	80010dc <HAL_UART_Transmit>
	  HAL_Delay(100);
 8001514:	2064      	movs	r0, #100	; 0x64
 8001516:	f7fe fe6b 	bl	80001f0 <HAL_Delay>
  {
 800151a:	e7c4      	b.n	80014a6 <main+0x29e>
 800151c:	f3af 8000 	nop.w
 8001520:	e8f0f0e2 	.word	0xe8f0f0e2
 8001524:	000000e8 	.word	0x000000e8
 8001528:	40021000 	.word	0x40021000
 800152c:	40011000 	.word	0x40011000
 8001530:	40010800 	.word	0x40010800
 8001534:	10210000 	.word	0x10210000
 8001538:	200000e4 	.word	0x200000e4
 800153c:	40013000 	.word	0x40013000
 8001540:	200000a4 	.word	0x200000a4
 8001544:	40013800 	.word	0x40013800
 8001548:	080026d5 	.word	0x080026d5
 800154c:	080026d8 	.word	0x080026d8
 8001550:	080026d1 	.word	0x080026d1
 8001554:	080026e7 	.word	0x080026e7
 8001558:	080026f1 	.word	0x080026f1
 800155c:	08002705 	.word	0x08002705
 8001560:	0800271a 	.word	0x0800271a
 8001564:	0800274f 	.word	0x0800274f
 8001568:	0800276a 	.word	0x0800276a
 800156c:	08002780 	.word	0x08002780
 8001570:	080027a6 	.word	0x080027a6
 8001574:	080027ba 	.word	0x080027ba
 8001578:	080027d1 	.word	0x080027d1
 800157c:	08002806 	.word	0x08002806
 8001580:	080027fd 	.word	0x080027fd
  else if(status == 0x01)
 8001584:	2d01      	cmp	r5, #1
 8001586:	d104      	bne.n	8001592 <main+0x38a>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_LOW\n", strlen("RF24_PA_LOW\n"), 1000);
 8001588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158c:	4632      	mov	r2, r6
 800158e:	4916      	ldr	r1, [pc, #88]	; (80015e8 <main+0x3e0>)
 8001590:	e71f      	b.n	80013d2 <main+0x1ca>
  else if(status == 0x02)
 8001592:	2d02      	cmp	r5, #2
 8001594:	d104      	bne.n	80015a0 <main+0x398>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_HIGH\n", strlen("RF24_PA_HIGH\n"), 1000);
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	220d      	movs	r2, #13
 800159c:	4913      	ldr	r1, [pc, #76]	; (80015ec <main+0x3e4>)
 800159e:	e718      	b.n	80013d2 <main+0x1ca>
  else if(status == 0x03)
 80015a0:	2d03      	cmp	r5, #3
 80015a2:	f47f af19 	bne.w	80013d8 <main+0x1d0>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MAX\n", strlen("RF24_PA_MAX\n"), 1000);
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	4632      	mov	r2, r6
 80015ac:	4910      	ldr	r1, [pc, #64]	; (80015f0 <main+0x3e8>)
 80015ae:	e710      	b.n	80013d2 <main+0x1ca>
  else if(status == 0x01)
 80015b0:	2c01      	cmp	r4, #1
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_2MBPS\n", strlen("RF24_2MBPS\n"), 1000);
 80015b2:	f04f 020b 	mov.w	r2, #11
 80015b6:	bf0c      	ite	eq
 80015b8:	490e      	ldreq	r1, [pc, #56]	; (80015f4 <main+0x3ec>)
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_1MBPS\n", strlen("RF24_1MBPS\n"), 1000);
 80015ba:	490f      	ldrne	r1, [pc, #60]	; (80015f8 <main+0x3f0>)
 80015bc:	e739      	b.n	8001432 <main+0x22a>
  else if(status == 0x01)
 80015be:	2c01      	cmp	r4, #1
 80015c0:	d104      	bne.n	80015cc <main+0x3c4>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_8\n", strlen("RF24_CRC_8\n"), 1000);
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	220b      	movs	r2, #11
 80015c8:	490c      	ldr	r1, [pc, #48]	; (80015fc <main+0x3f4>)
 80015ca:	e761      	b.n	8001490 <main+0x288>
  else if(status == 0x02)
 80015cc:	2c02      	cmp	r4, #2
 80015ce:	f47f af62 	bne.w	8001496 <main+0x28e>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_16\n", strlen("RF24_CRC_16\n"), 1000);
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	220c      	movs	r2, #12
 80015d8:	4909      	ldr	r1, [pc, #36]	; (8001600 <main+0x3f8>)
 80015da:	e759      	b.n	8001490 <main+0x288>
	  else HAL_UART_Transmit(&huart1, (uint8_t*)"Not write\n", strlen("Not write\n"), 1000);
 80015dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e0:	220a      	movs	r2, #10
 80015e2:	4629      	mov	r1, r5
 80015e4:	e793      	b.n	800150e <main+0x306>
 80015e6:	bf00      	nop
 80015e8:	08002727 	.word	0x08002727
 80015ec:	08002734 	.word	0x08002734
 80015f0:	08002742 	.word	0x08002742
 80015f4:	0800278e 	.word	0x0800278e
 80015f8:	0800279a 	.word	0x0800279a
 80015fc:	080027e4 	.word	0x080027e4
 8001600:	080027f0 	.word	0x080027f0

08001604 <DWT_Init>:
uint8_t txDelay = 0;


void DWT_Init(void)
{
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <DWT_Init+0x18>)
 8001606:	6813      	ldr	r3, [r2, #0]
 8001608:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160c:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <DWT_Init+0x1c>)
 8001610:	6813      	ldr	r3, [r2, #0]
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000edfc 	.word	0xe000edfc
 8001620:	e0001000 	.word	0xe0001000

08001624 <delay_us>:

void delay_us(uint32_t us) // DelayMicro
{
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <delay_us+0x1c>)
 8001626:	4a07      	ldr	r2, [pc, #28]	; (8001644 <delay_us+0x20>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	fbb3 f3f2 	udiv	r3, r3, r2
    DWT->CYCCNT = 0U; // обнуляем счётчик
 800162e:	2200      	movs	r2, #0
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8001630:	4358      	muls	r0, r3
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <delay_us+0x24>)
 8001634:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4282      	cmp	r2, r0
 800163a:	d3fc      	bcc.n	8001636 <delay_us+0x12>
}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008
 8001644:	000f4240 	.word	0x000f4240
 8001648:	e0001000 	.word	0xe0001000

0800164c <csn>:

void csn(uint8_t level)
{
 800164c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 800164e:	4602      	mov	r2, r0
 8001650:	2110      	movs	r1, #16
 8001652:	4804      	ldr	r0, [pc, #16]	; (8001664 <csn+0x18>)
 8001654:	f7fe ff28 	bl	80004a8 <HAL_GPIO_WritePin>
	delay_us(5);
}
 8001658:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_us(5);
 800165c:	2005      	movs	r0, #5
 800165e:	f7ff bfe1 	b.w	8001624 <delay_us>
 8001662:	bf00      	nop
 8001664:	40010800 	.word	0x40010800

08001668 <ce>:

void ce(uint8_t level)
{
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 8001668:	4602      	mov	r2, r0
 800166a:	2108      	movs	r1, #8
 800166c:	4801      	ldr	r0, [pc, #4]	; (8001674 <ce+0xc>)
 800166e:	f7fe bf1b 	b.w	80004a8 <HAL_GPIO_WritePin>
 8001672:	bf00      	nop
 8001674:	40010800 	.word	0x40010800

08001678 <read_register>:
}

uint8_t read_register(uint8_t reg)
{
 8001678:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 800167a:	f000 001f 	and.w	r0, r0, #31
 800167e:	f88d 000e 	strb.w	r0, [sp, #14]
	uint8_t dt = 0;
 8001682:	2000      	movs	r0, #0

	csn(LOW);
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 8001684:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	uint8_t dt = 0;
 8001688:	ac04      	add	r4, sp, #16
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 800168a:	4d0d      	ldr	r5, [pc, #52]	; (80016c0 <read_register+0x48>)
	uint8_t dt = 0;
 800168c:	f804 0d01 	strb.w	r0, [r4, #-1]!
	csn(LOW);
 8001690:	f7ff ffdc 	bl	800164c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 8001694:	4622      	mov	r2, r4
 8001696:	f10d 010e 	add.w	r1, sp, #14
 800169a:	9600      	str	r6, [sp, #0]
 800169c:	2301      	movs	r3, #1
 800169e:	4628      	mov	r0, r5
 80016a0:	f7ff fb02 	bl	8000ca8 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &dt, 1, 1000);
 80016a4:	2301      	movs	r3, #1
 80016a6:	4622      	mov	r2, r4
 80016a8:	21ff      	movs	r1, #255	; 0xff
 80016aa:	9600      	str	r6, [sp, #0]
 80016ac:	4628      	mov	r0, r5
 80016ae:	f7ff fafb 	bl	8000ca8 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7ff ffca 	bl	800164c <csn>
	return dt;
}
 80016b8:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80016bc:	b004      	add	sp, #16
 80016be:	bd70      	pop	{r4, r5, r6, pc}
 80016c0:	200000e4 	.word	0x200000e4

080016c4 <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
	uint8_t status = 0;
 80016c4:	2300      	movs	r3, #0
{
 80016c6:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);

	csn(LOW);
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 80016c8:	2564      	movs	r5, #100	; 0x64
{
 80016ca:	460e      	mov	r6, r1
 80016cc:	4617      	mov	r7, r2
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 80016ce:	f000 001f 	and.w	r0, r0, #31
{
 80016d2:	b085      	sub	sp, #20
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 80016d4:	4c0f      	ldr	r4, [pc, #60]	; (8001714 <write_registerMy+0x50>)
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 80016d6:	f040 0020 	orr.w	r0, r0, #32
 80016da:	f88d 000f 	strb.w	r0, [sp, #15]
	csn(LOW);
 80016de:	4618      	mov	r0, r3
	uint8_t status = 0;
 80016e0:	f88d 300e 	strb.w	r3, [sp, #14]
	csn(LOW);
 80016e4:	f7ff ffb2 	bl	800164c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 80016e8:	f10d 020e 	add.w	r2, sp, #14
 80016ec:	f10d 010f 	add.w	r1, sp, #15
 80016f0:	9500      	str	r5, [sp, #0]
 80016f2:	2301      	movs	r3, #1
 80016f4:	4620      	mov	r0, r4
 80016f6:	f7ff fad7 	bl	8000ca8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, len, 100);
 80016fa:	462b      	mov	r3, r5
 80016fc:	463a      	mov	r2, r7
 80016fe:	4631      	mov	r1, r6
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff fa28 	bl	8000b56 <HAL_SPI_Transmit>
	csn(HIGH);
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff ffa0 	bl	800164c <csn>
	return status;
}
 800170c:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8001710:	b005      	add	sp, #20
 8001712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001714:	200000e4 	.word	0x200000e4

08001718 <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
	uint8_t status = 0;
 8001718:	2300      	movs	r3, #0
{
 800171a:	b510      	push	{r4, lr}
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 800171c:	f000 001f 	and.w	r0, r0, #31
{
 8001720:	b086      	sub	sp, #24
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8001722:	f040 0020 	orr.w	r0, r0, #32
 8001726:	f88d 0017 	strb.w	r0, [sp, #23]
	csn(LOW);
 800172a:	4618      	mov	r0, r3
{
 800172c:	f88d 100f 	strb.w	r1, [sp, #15]
	uint8_t status = 0;
 8001730:	f88d 3016 	strb.w	r3, [sp, #22]
	csn(LOW);
 8001734:	f7ff ff8a 	bl	800164c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8001738:	2364      	movs	r3, #100	; 0x64
 800173a:	4c0c      	ldr	r4, [pc, #48]	; (800176c <write_register+0x54>)
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	f10d 0216 	add.w	r2, sp, #22
 8001742:	f10d 0117 	add.w	r1, sp, #23
 8001746:	2301      	movs	r3, #1
 8001748:	4620      	mov	r0, r4
 800174a:	f7ff faad 	bl	8000ca8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	2201      	movs	r2, #1
 8001754:	f10d 010f 	add.w	r1, sp, #15
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff f9fc 	bl	8000b56 <HAL_SPI_Transmit>
	csn(HIGH);
 800175e:	2001      	movs	r0, #1
 8001760:	f7ff ff74 	bl	800164c <csn>
	return status;
}
 8001764:	f89d 0016 	ldrb.w	r0, [sp, #22]
 8001768:	b006      	add	sp, #24
 800176a:	bd10      	pop	{r4, pc}
 800176c:	200000e4 	.word	0x200000e4

08001770 <write_payload>:

uint8_t write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
 8001770:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t status = 0;
 8001772:	2400      	movs	r4, #0
{
 8001774:	b085      	sub	sp, #20
	const uint8_t* current = (const uint8_t*)buf;
	uint8_t addr = writeType;

	data_len = rf24_min(data_len, payload_size);
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <write_payload+0x7c>)
	uint8_t addr = writeType;
 8001778:	f88d 200e 	strb.w	r2, [sp, #14]
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 800177c:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <write_payload+0x80>)
	data_len = rf24_min(data_len, payload_size);
 800177e:	781b      	ldrb	r3, [r3, #0]
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8001780:	7812      	ldrb	r2, [r2, #0]
	data_len = rf24_min(data_len, payload_size);
 8001782:	428b      	cmp	r3, r1
 8001784:	461d      	mov	r5, r3
{
 8001786:	4607      	mov	r7, r0
	uint8_t status = 0;
 8001788:	f88d 400d 	strb.w	r4, [sp, #13]
	data_len = rf24_min(data_len, payload_size);
 800178c:	bf28      	it	cs
 800178e:	460d      	movcs	r5, r1
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8001790:	b90a      	cbnz	r2, 8001796 <write_payload+0x26>
 8001792:	1b5c      	subs	r4, r3, r5
 8001794:	b2e4      	uxtb	r4, r4

	csn(LOW);
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8001796:	2664      	movs	r6, #100	; 0x64
	csn(LOW);
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff ff57 	bl	800164c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 800179e:	9600      	str	r6, [sp, #0]
 80017a0:	2301      	movs	r3, #1
 80017a2:	f10d 020d 	add.w	r2, sp, #13
 80017a6:	f10d 010e 	add.w	r1, sp, #14
 80017aa:	4812      	ldr	r0, [pc, #72]	; (80017f4 <write_payload+0x84>)
 80017ac:	f7ff fa7c 	bl	8000ca8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 100);
 80017b0:	4633      	mov	r3, r6
 80017b2:	462a      	mov	r2, r5
 80017b4:	4639      	mov	r1, r7
 80017b6:	480f      	ldr	r0, [pc, #60]	; (80017f4 <write_payload+0x84>)
 80017b8:	f7ff f9cd 	bl	8000b56 <HAL_SPI_Transmit>

	while(blank_len--)
	{
		uint8_t empt = 0;
 80017bc:	2500      	movs	r5, #0
		HAL_SPI_Transmit(&hspi1, &empt, 1, 100);
 80017be:	4e0d      	ldr	r6, [pc, #52]	; (80017f4 <write_payload+0x84>)
	while(blank_len--)
 80017c0:	3c01      	subs	r4, #1
 80017c2:	b2e4      	uxtb	r4, r4
 80017c4:	2cff      	cmp	r4, #255	; 0xff
 80017c6:	d106      	bne.n	80017d6 <write_payload+0x66>
	}

	csn(HIGH);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7ff ff3f 	bl	800164c <csn>
	return status;
}
 80017ce:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80017d2:	b005      	add	sp, #20
 80017d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SPI_Transmit(&hspi1, &empt, 1, 100);
 80017d6:	2364      	movs	r3, #100	; 0x64
 80017d8:	2201      	movs	r2, #1
 80017da:	f10d 010f 	add.w	r1, sp, #15
 80017de:	4630      	mov	r0, r6
		uint8_t empt = 0;
 80017e0:	f88d 500f 	strb.w	r5, [sp, #15]
		HAL_SPI_Transmit(&hspi1, &empt, 1, 100);
 80017e4:	f7ff f9b7 	bl	8000b56 <HAL_SPI_Transmit>
 80017e8:	e7ea      	b.n	80017c0 <write_payload+0x50>
 80017ea:	bf00      	nop
 80017ec:	2000008d 	.word	0x2000008d
 80017f0:	2000013c 	.word	0x2000013c
 80017f4:	200000e4 	.word	0x200000e4

080017f8 <read_payload>:

uint8_t read_payload(void* buf, uint8_t data_len)
{
 80017f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t status = 0;
	uint8_t* current = (uint8_t*)buf;

	if(data_len > payload_size)
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <read_payload+0x70>)
{
 80017fc:	4607      	mov	r7, r0
	if(data_len > payload_size)
 80017fe:	781c      	ldrb	r4, [r3, #0]
	{
		data_len = payload_size;
	}

	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <read_payload+0x74>)
 8001802:	428c      	cmp	r4, r1
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	4626      	mov	r6, r4
 8001808:	bf28      	it	cs
 800180a:	460e      	movcs	r6, r1
 800180c:	bb03      	cbnz	r3, 8001850 <read_payload+0x58>
 800180e:	1ba4      	subs	r4, r4, r6
 8001810:	b2e4      	uxtb	r4, r4

	uint8_t addr = R_RX_PAYLOAD;
 8001812:	2361      	movs	r3, #97	; 0x61
 8001814:	ad02      	add	r5, sp, #8
 8001816:	f805 3d02 	strb.w	r3, [r5, #-2]!
	csn(LOW);
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff ff16 	bl	800164c <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 8001820:	4629      	mov	r1, r5
 8001822:	2364      	movs	r3, #100	; 0x64
 8001824:	2201      	movs	r2, #1
 8001826:	4812      	ldr	r0, [pc, #72]	; (8001870 <read_payload+0x78>)
 8001828:	f7ff f995 	bl	8000b56 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)current, data_len, 100);
 800182c:	4632      	mov	r2, r6
 800182e:	2364      	movs	r3, #100	; 0x64
 8001830:	4639      	mov	r1, r7
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <read_payload+0x78>)
 8001834:	f7ff fb28 	bl	8000e88 <HAL_SPI_Receive>

	while(blank_len--)
	{
		uint8_t empt = 0;
 8001838:	2500      	movs	r5, #0
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 800183a:	4e0d      	ldr	r6, [pc, #52]	; (8001870 <read_payload+0x78>)
	while(blank_len--)
 800183c:	3c01      	subs	r4, #1
 800183e:	b2e4      	uxtb	r4, r4
 8001840:	2cff      	cmp	r4, #255	; 0xff
 8001842:	d107      	bne.n	8001854 <read_payload+0x5c>
	}

	csn(HIGH);
 8001844:	2001      	movs	r0, #1
 8001846:	f7ff ff01 	bl	800164c <csn>
	return status;
}
 800184a:	2000      	movs	r0, #0
 800184c:	b003      	add	sp, #12
 800184e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8001850:	2400      	movs	r4, #0
 8001852:	e7de      	b.n	8001812 <read_payload+0x1a>
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 8001854:	2364      	movs	r3, #100	; 0x64
 8001856:	2201      	movs	r2, #1
 8001858:	f10d 0107 	add.w	r1, sp, #7
 800185c:	4630      	mov	r0, r6
		uint8_t empt = 0;
 800185e:	f88d 5007 	strb.w	r5, [sp, #7]
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 8001862:	f7ff fb11 	bl	8000e88 <HAL_SPI_Receive>
 8001866:	e7e9      	b.n	800183c <read_payload+0x44>
 8001868:	2000008d 	.word	0x2000008d
 800186c:	2000013c 	.word	0x2000013c
 8001870:	200000e4 	.word	0x200000e4

08001874 <spiTrans>:
{
	return spiTrans(FLUSH_TX);
}

uint8_t spiTrans(uint8_t cmd)
{
 8001874:	b510      	push	{r4, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t status = 0;
 800187c:	2000      	movs	r0, #0
 800187e:	ac06      	add	r4, sp, #24
 8001880:	f804 0d01 	strb.w	r0, [r4, #-1]!
	csn(LOW);
 8001884:	f7ff fee2 	bl	800164c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &cmd, &status, 1, 1000);
 8001888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188c:	4622      	mov	r2, r4
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	f10d 010f 	add.w	r1, sp, #15
 8001894:	2301      	movs	r3, #1
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <spiTrans+0x38>)
 8001898:	f7ff fa06 	bl	8000ca8 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff fed5 	bl	800164c <csn>
	return status;
}
 80018a2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80018a6:	b006      	add	sp, #24
 80018a8:	bd10      	pop	{r4, pc}
 80018aa:	bf00      	nop
 80018ac:	200000e4 	.word	0x200000e4

080018b0 <flush_rx>:
	return spiTrans(FLUSH_RX);
 80018b0:	20e2      	movs	r0, #226	; 0xe2
 80018b2:	f7ff bfdf 	b.w	8001874 <spiTrans>

080018b6 <flush_tx>:
	return spiTrans(FLUSH_TX);
 80018b6:	20e1      	movs	r0, #225	; 0xe1
 80018b8:	f7ff bfdc 	b.w	8001874 <spiTrans>

080018bc <get_status>:

uint8_t get_status(void)
{
	return spiTrans(NOP);
 80018bc:	20ff      	movs	r0, #255	; 0xff
 80018be:	f7ff bfd9 	b.w	8001874 <spiTrans>

080018c2 <setChannel>:
}

void setChannel(uint8_t channel)
{
	write_register(RF_CH, channel);
 80018c2:	4601      	mov	r1, r0
 80018c4:	2005      	movs	r0, #5
 80018c6:	f7ff bf27 	b.w	8001718 <write_register>

080018ca <getChannel>:
}

uint8_t getChannel()
{
	return read_register(RF_CH);
 80018ca:	2005      	movs	r0, #5
 80018cc:	f7ff bed4 	b.w	8001678 <read_register>

080018d0 <getPayloadSize>:
}

uint8_t getPayloadSize(void)
{
	return payload_size;
}
 80018d0:	4b01      	ldr	r3, [pc, #4]	; (80018d8 <getPayloadSize+0x8>)
 80018d2:	7818      	ldrb	r0, [r3, #0]
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2000008d 	.word	0x2000008d

080018dc <isChipConnected>:
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
	return (setup != 0 && setup != 0xff);
}

bool isChipConnected()
{
 80018dc:	b508      	push	{r3, lr}
	uint8_t setup = read_register(SETUP_AW);
 80018de:	2003      	movs	r0, #3
 80018e0:	f7ff feca 	bl	8001678 <read_register>

	if(setup >= 1 && setup <= 3)
 80018e4:	3801      	subs	r0, #1
 80018e6:	b2c0      	uxtb	r0, r0
	{
		return true;
	}

	return false;
}
 80018e8:	2802      	cmp	r0, #2
 80018ea:	bf8c      	ite	hi
 80018ec:	2000      	movhi	r0, #0
 80018ee:	2001      	movls	r0, #1
 80018f0:	bd08      	pop	{r3, pc}

080018f2 <powerUp>:
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) & ~(1 << PWR_UP));
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
 80018f2:	b508      	push	{r3, lr}
	uint8_t cfg = read_register(NRF_CONFIG);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff febf 	bl	8001678 <read_register>
 80018fa:	4601      	mov	r1, r0
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 80018fc:	f010 0002 	ands.w	r0, r0, #2
 8001900:	d109      	bne.n	8001916 <powerUp+0x24>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 8001902:	f041 0102 	orr.w	r1, r1, #2
 8001906:	b2c9      	uxtb	r1, r1
 8001908:	f7ff ff06 	bl	8001718 <write_register>
		HAL_Delay(5);
	}
}
 800190c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_Delay(5);
 8001910:	2005      	movs	r0, #5
 8001912:	f7fe bc6d 	b.w	80001f0 <HAL_Delay>
}
 8001916:	bd08      	pop	{r3, pc}

08001918 <startFastWrite>:
	//TX OK 1 or 0
	return 1;
}

void startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{
 8001918:	b510      	push	{r4, lr}
 800191a:	461c      	mov	r4, r3
	write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
 800191c:	2a00      	cmp	r2, #0
 800191e:	bf14      	ite	ne
 8001920:	22b0      	movne	r2, #176	; 0xb0
 8001922:	22a0      	moveq	r2, #160	; 0xa0
 8001924:	f7ff ff24 	bl	8001770 <write_payload>

	if(startTx)
 8001928:	b124      	cbz	r4, 8001934 <startFastWrite+0x1c>
	{
		ce(HIGH);
	}
}
 800192a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ce(HIGH);
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff be9a 	b.w	8001668 <ce>
}
 8001934:	bd10      	pop	{r4, pc}

08001936 <write>:
{
 8001936:	b508      	push	{r3, lr}
	startFastWrite(buf, len, 1, 1);
 8001938:	2301      	movs	r3, #1
 800193a:	461a      	mov	r2, r3
 800193c:	f7ff ffec 	bl	8001918 <startFastWrite>
	while(!(get_status() & ((1 << TX_DS) | (1 << MAX_RT))))
 8001940:	f7ff ffbc 	bl	80018bc <get_status>
 8001944:	f010 0f30 	tst.w	r0, #48	; 0x30
 8001948:	d0fa      	beq.n	8001940 <write+0xa>
	ce(LOW);
 800194a:	2000      	movs	r0, #0
 800194c:	f7ff fe8c 	bl	8001668 <ce>
	uint8_t status = write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8001950:	2170      	movs	r1, #112	; 0x70
 8001952:	2007      	movs	r0, #7
 8001954:	f7ff fee0 	bl	8001718 <write_register>
	if(status & (1 << MAX_RT))
 8001958:	06c3      	lsls	r3, r0, #27
 800195a:	d503      	bpl.n	8001964 <write+0x2e>
		flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
 800195c:	f7ff ffab 	bl	80018b6 <flush_tx>
		return 0;
 8001960:	2000      	movs	r0, #0
}
 8001962:	bd08      	pop	{r3, pc}
	return 1;
 8001964:	2001      	movs	r0, #1
 8001966:	e7fc      	b.n	8001962 <write+0x2c>

08001968 <maskIRQ>:

void maskIRQ(bool tx, bool fail, bool rx)
{
 8001968:	b570      	push	{r4, r5, r6, lr}
 800196a:	4614      	mov	r4, r2
 800196c:	4606      	mov	r6, r0
	uint8_t config = read_register(NRF_CONFIG);
 800196e:	2000      	movs	r0, #0
{
 8001970:	460d      	mov	r5, r1
	uint8_t config = read_register(NRF_CONFIG);
 8001972:	f7ff fe81 	bl	8001678 <read_register>
	config &= ~(1 << MASK_MAX_RT | 1 << MASK_TX_DS | 1 << MASK_RX_DR); //clear the interrupt flags
	config |= fail << MASK_MAX_RT | tx << MASK_TX_DS | rx << MASK_RX_DR; // set the specified interrupt flags
 8001976:	01a4      	lsls	r4, r4, #6
 8001978:	ea44 1446 	orr.w	r4, r4, r6, lsl #5
 800197c:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
	config &= ~(1 << MASK_MAX_RT | 1 << MASK_TX_DS | 1 << MASK_RX_DR); //clear the interrupt flags
 8001980:	f020 0070 	bic.w	r0, r0, #112	; 0x70
	config |= fail << MASK_MAX_RT | tx << MASK_TX_DS | rx << MASK_RX_DR; // set the specified interrupt flags
 8001984:	4301      	orrs	r1, r0
	write_register(NRF_CONFIG, config);
 8001986:	b2c9      	uxtb	r1, r1
 8001988:	2000      	movs	r0, #0
}
 800198a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	write_register(NRF_CONFIG, config);
 800198e:	f7ff bec3 	b.w	8001718 <write_register>

08001992 <read>:

	return 0;
}

void read(void* buf, uint8_t len)
{
 8001992:	b508      	push	{r3, lr}
	read_payload(buf, len);
 8001994:	f7ff ff30 	bl	80017f8 <read_payload>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
}
 8001998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
 800199c:	2170      	movs	r1, #112	; 0x70
 800199e:	2007      	movs	r0, #7
 80019a0:	f7ff beba 	b.w	8001718 <write_register>

080019a4 <openWritingPipe>:
	uint8_t rx_ready = status & (1 << RX_DR);*/
	return status;
}

void openWritingPipe(uint64_t value)
{
 80019a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019a6:	ac02      	add	r4, sp, #8
 80019a8:	e964 0102 	strd	r0, r1, [r4, #-8]!
	write_registerMy(RX_ADDR_P0, (uint8_t*)&value, addr_width);
 80019ac:	4d08      	ldr	r5, [pc, #32]	; (80019d0 <openWritingPipe+0x2c>)
 80019ae:	4621      	mov	r1, r4
 80019b0:	782a      	ldrb	r2, [r5, #0]
 80019b2:	200a      	movs	r0, #10
 80019b4:	f7ff fe86 	bl	80016c4 <write_registerMy>
	write_registerMy(TX_ADDR, (uint8_t*)&value, addr_width);
 80019b8:	782a      	ldrb	r2, [r5, #0]
 80019ba:	4621      	mov	r1, r4
 80019bc:	2010      	movs	r0, #16
 80019be:	f7ff fe81 	bl	80016c4 <write_registerMy>
	write_register(RX_PW_P0, payload_size);
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <openWritingPipe+0x30>)
 80019c4:	2011      	movs	r0, #17
 80019c6:	7819      	ldrb	r1, [r3, #0]
 80019c8:	f7ff fea6 	bl	8001718 <write_register>
}
 80019cc:	b003      	add	sp, #12
 80019ce:	bd30      	pop	{r4, r5, pc}
 80019d0:	2000008c 	.word	0x2000008c
 80019d4:	2000008d 	.word	0x2000008d

080019d8 <toggle_features>:
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
}

void toggle_features(void)
{
	uint8_t addr = ACTIVATE;
 80019d8:	2350      	movs	r3, #80	; 0x50
{
 80019da:	b537      	push	{r0, r1, r2, r4, r5, lr}
	csn(LOW);
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 80019dc:	4d0c      	ldr	r5, [pc, #48]	; (8001a10 <toggle_features+0x38>)
	uint8_t addr = ACTIVATE;
 80019de:	ac02      	add	r4, sp, #8
 80019e0:	f804 3d01 	strb.w	r3, [r4, #-1]!
	csn(LOW);
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fe31 	bl	800164c <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 80019ea:	4621      	mov	r1, r4
 80019ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f0:	2201      	movs	r2, #1
 80019f2:	4628      	mov	r0, r5
 80019f4:	f7ff f8af 	bl	8000b56 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)0x73, 1, 1000);
 80019f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fc:	2201      	movs	r2, #1
 80019fe:	2173      	movs	r1, #115	; 0x73
 8001a00:	4628      	mov	r0, r5
 8001a02:	f7ff f8a8 	bl	8000b56 <HAL_SPI_Transmit>
	csn(HIGH);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f7ff fe20 	bl	800164c <csn>
}
 8001a0c:	b003      	add	sp, #12
 8001a0e:	bd30      	pop	{r4, r5, pc}
 8001a10:	200000e4 	.word	0x200000e4

08001a14 <enableAckPayload>:
	write_register(DYNPD, 0);
	dynamic_payloads_enabled = false;
}

void enableAckPayload(void)
{
 8001a14:	b508      	push	{r3, lr}
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_ACK_PAY) | (1 << EN_DPL));
 8001a16:	201d      	movs	r0, #29
 8001a18:	f7ff fe2e 	bl	8001678 <read_register>
 8001a1c:	f040 0106 	orr.w	r1, r0, #6
 8001a20:	b2c9      	uxtb	r1, r1
 8001a22:	201d      	movs	r0, #29
 8001a24:	f7ff fe78 	bl	8001718 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P1) | (1 << DPL_P0));
 8001a28:	201c      	movs	r0, #28
 8001a2a:	f7ff fe25 	bl	8001678 <read_register>
 8001a2e:	f040 0103 	orr.w	r1, r0, #3
 8001a32:	b2c9      	uxtb	r1, r1
 8001a34:	201c      	movs	r0, #28
 8001a36:	f7ff fe6f 	bl	8001718 <write_register>
	dynamic_payloads_enabled = true;
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4b01      	ldr	r3, [pc, #4]	; (8001a44 <enableAckPayload+0x30>)
 8001a3e:	701a      	strb	r2, [r3, #0]
}
 8001a40:	bd08      	pop	{r3, pc}
 8001a42:	bf00      	nop
 8001a44:	2000013c 	.word	0x2000013c

08001a48 <isAckPayloadAvailable>:
	HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 1000);
	csn(HIGH);
}

bool isAckPayloadAvailable(void)
{
 8001a48:	b508      	push	{r3, lr}
	return !(read_register(FIFO_STATUS) & (1 << RX_EMPTY));
 8001a4a:	2017      	movs	r0, #23
 8001a4c:	f7ff fe14 	bl	8001678 <read_register>
 8001a50:	43c0      	mvns	r0, r0
}
 8001a52:	f000 0001 	and.w	r0, r0, #1
 8001a56:	bd08      	pop	{r3, pc}

08001a58 <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 8001a58:	b510      	push	{r4, lr}
 8001a5a:	4604      	mov	r4, r0
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 8001a5c:	2006      	movs	r0, #6
 8001a5e:	f7ff fe0b 	bl	8001678 <read_register>

  if(level > 3) // If invalid level, go to max PA
 8001a62:	2c03      	cmp	r4, #3
  {
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
 8001a64:	bf8e      	itee	hi
 8001a66:	2407      	movhi	r4, #7
  }
  else
  {
	  level = (level << 1) + 1;	 		// Else set level as requested
 8001a68:	0064      	lslls	r4, r4, #1
 8001a6a:	3401      	addls	r4, #1
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 8001a6c:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	  level = (level << 1) + 1;	 		// Else set level as requested
 8001a70:	bf98      	it	ls
 8001a72:	f004 04ff 	andls.w	r4, r4, #255	; 0xff
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 8001a76:	4321      	orrs	r1, r4
 8001a78:	2006      	movs	r0, #6
}
 8001a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 8001a7e:	f7ff be4b 	b.w	8001718 <write_register>

08001a82 <getPALevel>:

uint8_t getPALevel(void)
{
 8001a82:	b508      	push	{r3, lr}
	return (read_register(RF_SETUP) & ((1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH))) >> 1;
 8001a84:	2006      	movs	r0, #6
 8001a86:	f7ff fdf7 	bl	8001678 <read_register>
}
 8001a8a:	f3c0 0041 	ubfx	r0, r0, #1, #2
 8001a8e:	bd08      	pop	{r3, pc}

08001a90 <setDataRate>:

bool setDataRate(rf24_datarate_e speed)
{
 8001a90:	b538      	push	{r3, r4, r5, lr}
 8001a92:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = read_register(RF_SETUP);
 8001a94:	2006      	movs	r0, #6
 8001a96:	f7ff fdef 	bl	8001678 <read_register>
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
	txDelay = 85;

	if(speed == RF24_250KBPS)
 8001a9a:	2d02      	cmp	r5, #2
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8001a9c:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <setDataRate+0x40>)
	if(speed == RF24_250KBPS)
 8001aa2:	d10e      	bne.n	8001ac2 <setDataRate+0x32>
	{
		setup |= (1 << RF_DR_LOW);
		txDelay = 155;
 8001aa4:	229b      	movs	r2, #155	; 0x9b
		setup |= (1 << RF_DR_LOW);
 8001aa6:	f044 0420 	orr.w	r4, r4, #32
			setup |= (1 << RF_DR_HIGH);
			txDelay = 65;
		}
	}

	write_register(RF_SETUP, setup);
 8001aaa:	4621      	mov	r1, r4
 8001aac:	2006      	movs	r0, #6
			txDelay = 65;
 8001aae:	701a      	strb	r2, [r3, #0]
	write_register(RF_SETUP, setup);
 8001ab0:	f7ff fe32 	bl	8001718 <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 8001ab4:	2006      	movs	r0, #6
 8001ab6:	f7ff fddf 	bl	8001678 <read_register>
	{
		result = true;
	}

	return result;
}
 8001aba:	1a23      	subs	r3, r4, r0
 8001abc:	4258      	negs	r0, r3
 8001abe:	4158      	adcs	r0, r3
 8001ac0:	bd38      	pop	{r3, r4, r5, pc}
		if(speed == RF24_2MBPS)
 8001ac2:	2d01      	cmp	r5, #1
	txDelay = 85;
 8001ac4:	bf12      	itee	ne
 8001ac6:	2255      	movne	r2, #85	; 0x55
			setup |= (1 << RF_DR_HIGH);
 8001ac8:	f044 0408 	orreq.w	r4, r4, #8
			txDelay = 65;
 8001acc:	2241      	moveq	r2, #65	; 0x41
 8001ace:	e7ec      	b.n	8001aaa <setDataRate+0x1a>
 8001ad0:	20000093 	.word	0x20000093

08001ad4 <NRF_Init>:
	payload_size = 32;
 8001ad4:	2220      	movs	r2, #32
{
 8001ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	addr_width = 5;
 8001ad8:	2705      	movs	r7, #5
	p_variant = false;
 8001ada:	2400      	movs	r4, #0
	payload_size = 32;
 8001adc:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <NRF_Init+0xb0>)
	p_variant = false;
 8001ade:	4e2a      	ldr	r6, [pc, #168]	; (8001b88 <NRF_Init+0xb4>)
	payload_size = 32;
 8001ae0:	701a      	strb	r2, [r3, #0]
	addr_width = 5;
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <NRF_Init+0xb8>)
	dynamic_payloads_enabled = false;
 8001ae4:	4d2a      	ldr	r5, [pc, #168]	; (8001b90 <NRF_Init+0xbc>)
	addr_width = 5;
 8001ae6:	701f      	strb	r7, [r3, #0]
	pipe0_reading_address[0] = 0;
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <NRF_Init+0xc0>)
	ce(LOW);
 8001aea:	4620      	mov	r0, r4
	pipe0_reading_address[0] = 0;
 8001aec:	701c      	strb	r4, [r3, #0]
	p_variant = false;
 8001aee:	7034      	strb	r4, [r6, #0]
	dynamic_payloads_enabled = false;
 8001af0:	702c      	strb	r4, [r5, #0]
	ce(LOW);
 8001af2:	f7ff fdb9 	bl	8001668 <ce>
	csn(HIGH);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7ff fda8 	bl	800164c <csn>
	HAL_Delay(5);
 8001afc:	4638      	mov	r0, r7
 8001afe:	f7fe fb77 	bl	80001f0 <HAL_Delay>
	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 8001b02:	210c      	movs	r1, #12
 8001b04:	4620      	mov	r0, r4
 8001b06:	f7ff fe07 	bl	8001718 <write_register>
	write_register(NRF_CONFIG, disable);
}

void setRetries(uint8_t delay, uint8_t count)
{
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 8001b0a:	215f      	movs	r1, #95	; 0x5f
 8001b0c:	2004      	movs	r0, #4
 8001b0e:	f7ff fe03 	bl	8001718 <write_register>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 8001b12:	2003      	movs	r0, #3
 8001b14:	f7ff ffa0 	bl	8001a58 <setPALevel>
	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f7ff ffb9 	bl	8001a90 <setDataRate>
 8001b1e:	b108      	cbz	r0, 8001b24 <NRF_Init+0x50>
		p_variant = true;
 8001b20:	2301      	movs	r3, #1
 8001b22:	7033      	strb	r3, [r6, #0]
	setup = read_register(RF_SETUP);
 8001b24:	2006      	movs	r0, #6
 8001b26:	f7ff fda7 	bl	8001678 <read_register>
	dynamic_payloads_enabled = false;
 8001b2a:	2600      	movs	r6, #0
	setup = read_register(RF_SETUP);
 8001b2c:	4604      	mov	r4, r0
	setDataRate(RF24_1MBPS); // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f7ff ffae 	bl	8001a90 <setDataRate>
	toggle_features();
 8001b34:	f7ff ff50 	bl	80019d8 <toggle_features>
	write_register(FEATURE, 0);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	201d      	movs	r0, #29
 8001b3c:	f7ff fdec 	bl	8001718 <write_register>
	write_register(DYNPD, 0);
 8001b40:	2100      	movs	r1, #0
 8001b42:	201c      	movs	r0, #28
 8001b44:	f7ff fde8 	bl	8001718 <write_register>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8001b48:	2170      	movs	r1, #112	; 0x70
 8001b4a:	2007      	movs	r0, #7
	dynamic_payloads_enabled = false;
 8001b4c:	702e      	strb	r6, [r5, #0]
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8001b4e:	f7ff fde3 	bl	8001718 <write_register>
	setChannel(76);
 8001b52:	204c      	movs	r0, #76	; 0x4c
 8001b54:	f7ff feb5 	bl	80018c2 <setChannel>
	flush_rx();
 8001b58:	f7ff feaa 	bl	80018b0 <flush_rx>
	flush_tx();
 8001b5c:	f7ff feab 	bl	80018b6 <flush_tx>
	powerUp(); //Power up by default when begin() is called
 8001b60:	f7ff fec7 	bl	80018f2 <powerUp>
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 8001b64:	4630      	mov	r0, r6
 8001b66:	f7ff fd87 	bl	8001678 <read_register>
 8001b6a:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8001b6e:	4630      	mov	r0, r6
 8001b70:	f7ff fdd2 	bl	8001718 <write_register>
	return (setup != 0 && setup != 0xff);
 8001b74:	1e60      	subs	r0, r4, #1
 8001b76:	b2c0      	uxtb	r0, r0
}
 8001b78:	28fd      	cmp	r0, #253	; 0xfd
 8001b7a:	bf8c      	ite	hi
 8001b7c:	2000      	movhi	r0, #0
 8001b7e:	2001      	movls	r0, #1
 8001b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000008d 	.word	0x2000008d
 8001b88:	2000013d 	.word	0x2000013d
 8001b8c:	2000008c 	.word	0x2000008c
 8001b90:	2000013c 	.word	0x2000013c
 8001b94:	2000008e 	.word	0x2000008e

08001b98 <getDataRate>:
{
 8001b98:	b508      	push	{r3, lr}
	uint8_t dr = read_register(RF_SETUP) & ((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8001b9a:	2006      	movs	r0, #6
 8001b9c:	f7ff fd6c 	bl	8001678 <read_register>
 8001ba0:	f000 0028 	and.w	r0, r0, #40	; 0x28
	if(dr == (1 << RF_DR_LOW))
 8001ba4:	2820      	cmp	r0, #32
 8001ba6:	d004      	beq.n	8001bb2 <getDataRate+0x1a>
		result = RF24_250KBPS;
 8001ba8:	f1a0 0308 	sub.w	r3, r0, #8
 8001bac:	4258      	negs	r0, r3
 8001bae:	4158      	adcs	r0, r3
}
 8001bb0:	bd08      	pop	{r3, pc}
		result = RF24_250KBPS;
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	e7fc      	b.n	8001bb0 <getDataRate+0x18>

08001bb6 <getCRCLength>:
{
 8001bb6:	b510      	push	{r4, lr}
	uint8_t config = read_register(NRF_CONFIG) & ((1 << CRCO) | (1 << EN_CRC));
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff fd5d 	bl	8001678 <read_register>
 8001bbe:	4604      	mov	r4, r0
	uint8_t AA = read_register(EN_AA);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f7ff fd59 	bl	8001678 <read_register>
	if(config & (1 << EN_CRC) || AA)
 8001bc6:	0723      	lsls	r3, r4, #28
 8001bc8:	d400      	bmi.n	8001bcc <getCRCLength+0x16>
 8001bca:	b120      	cbz	r0, 8001bd6 <getCRCLength+0x20>
		if(config & (1 << CRCO))
 8001bcc:	f014 0f04 	tst.w	r4, #4
		  result = RF24_CRC_8;
 8001bd0:	bf14      	ite	ne
 8001bd2:	2002      	movne	r0, #2
 8001bd4:	2001      	moveq	r0, #1
}
 8001bd6:	bd10      	pop	{r4, pc}

08001bd8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_MspInit+0x3c>)
{
 8001bda:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bdc:	699a      	ldr	r2, [r3, #24]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	619a      	str	r2, [r3, #24]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	f002 0201 	and.w	r2, r2, #1
 8001bea:	9200      	str	r2, [sp, #0]
 8001bec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	69da      	ldr	r2, [r3, #28]
 8001bf0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bf4:	61da      	str	r2, [r3, #28]
 8001bf6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c02:	6853      	ldr	r3, [r2, #4]
 8001c04:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	b002      	add	sp, #8
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010000 	.word	0x40010000

08001c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c1c:	b510      	push	{r4, lr}
 8001c1e:	4604      	mov	r4, r0
 8001c20:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	2210      	movs	r2, #16
 8001c24:	2100      	movs	r1, #0
 8001c26:	a802      	add	r0, sp, #8
 8001c28:	f000 f917 	bl	8001e5a <memset>
  if(hspi->Instance==SPI1)
 8001c2c:	6822      	ldr	r2, [r4, #0]
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <HAL_SPI_MspInit+0x6c>)
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d126      	bne.n	8001c82 <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c34:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001c38:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c40:	619a      	str	r2, [r3, #24]
 8001c42:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	4811      	ldr	r0, [pc, #68]	; (8001c8c <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c46:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c4a:	9200      	str	r2, [sp, #0]
 8001c4c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	f042 0204 	orr.w	r2, r2, #4
 8001c54:	619a      	str	r2, [r3, #24]
 8001c56:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	f7fe fb3c 	bl	80002e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c70:	2140      	movs	r1, #64	; 0x40
 8001c72:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c76:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f7fe fb33 	bl	80002e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c82:	b006      	add	sp, #24
 8001c84:	bd10      	pop	{r4, pc}
 8001c86:	bf00      	nop
 8001c88:	40013000 	.word	0x40013000
 8001c8c:	40010800 	.word	0x40010800

08001c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c90:	b510      	push	{r4, lr}
 8001c92:	4604      	mov	r4, r0
 8001c94:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	2210      	movs	r2, #16
 8001c98:	2100      	movs	r1, #0
 8001c9a:	a802      	add	r0, sp, #8
 8001c9c:	f000 f8dd 	bl	8001e5a <memset>
  if(huart->Instance==USART1)
 8001ca0:	6822      	ldr	r2, [r4, #0]
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <HAL_UART_MspInit+0x70>)
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d128      	bne.n	8001cfa <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ca8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001cac:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cb4:	619a      	str	r2, [r3, #24]
 8001cb6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	4812      	ldr	r0, [pc, #72]	; (8001d04 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	f042 0204 	orr.w	r2, r2, #4
 8001cc8:	619a      	str	r2, [r3, #24]
 8001cca:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f7fe fb01 	bl	80002e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cea:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	4805      	ldr	r0, [pc, #20]	; (8001d04 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cee:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f7fe faf7 	bl	80002e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cfa:	b006      	add	sp, #24
 8001cfc:	bd10      	pop	{r4, pc}
 8001cfe:	bf00      	nop
 8001d00:	40013800 	.word	0x40013800
 8001d04:	40010800 	.word	0x40010800

08001d08 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d08:	4770      	bx	lr

08001d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0a:	e7fe      	b.n	8001d0a <HardFault_Handler>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	e7fe      	b.n	8001d0c <MemManage_Handler>

08001d0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0e:	e7fe      	b.n	8001d0e <BusFault_Handler>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	e7fe      	b.n	8001d10 <UsageFault_Handler>

08001d12 <SVC_Handler>:
 8001d12:	4770      	bx	lr

08001d14 <DebugMon_Handler>:
 8001d14:	4770      	bx	lr

08001d16 <PendSV_Handler>:
 8001d16:	4770      	bx	lr

08001d18 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d18:	f7fe ba58 	b.w	80001cc <HAL_IncTick>

08001d1c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001d1c:	2004      	movs	r0, #4
 8001d1e:	f7fe bbcf 	b.w	80004c0 <HAL_GPIO_EXTI_IRQHandler>
	...

08001d24 <_sbrk>:
 8001d24:	b508      	push	{r3, lr}
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <_sbrk+0x2c>)
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6819      	ldr	r1, [r3, #0]
 8001d2c:	b909      	cbnz	r1, 8001d32 <_sbrk+0xe>
 8001d2e:	4909      	ldr	r1, [pc, #36]	; (8001d54 <_sbrk+0x30>)
 8001d30:	6019      	str	r1, [r3, #0]
 8001d32:	4669      	mov	r1, sp
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	4402      	add	r2, r0
 8001d38:	428a      	cmp	r2, r1
 8001d3a:	d906      	bls.n	8001d4a <_sbrk+0x26>
 8001d3c:	f000 f858 	bl	8001df0 <__errno>
 8001d40:	230c      	movs	r3, #12
 8001d42:	6003      	str	r3, [r0, #0]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	bd08      	pop	{r3, pc}
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	bd08      	pop	{r3, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000094 	.word	0x20000094
 8001d54:	20000144 	.word	0x20000144

08001d58 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <SystemInit+0x40>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <SystemInit+0x44>)
 8001d66:	400a      	ands	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d74:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d7c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001d84:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001d86:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d8a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <SystemInit+0x48>)
 8001d92:	609a      	str	r2, [r3, #8]
#endif 
}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	f8ff0000 	.word	0xf8ff0000
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <Reset_Handler>:
 8001da4:	2100      	movs	r1, #0
 8001da6:	e003      	b.n	8001db0 <LoopCopyDataInit>

08001da8 <CopyDataInit>:
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <LoopFillZerobss+0x14>)
 8001daa:	585b      	ldr	r3, [r3, r1]
 8001dac:	5043      	str	r3, [r0, r1]
 8001dae:	3104      	adds	r1, #4

08001db0 <LoopCopyDataInit>:
 8001db0:	480a      	ldr	r0, [pc, #40]	; (8001ddc <LoopFillZerobss+0x18>)
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <LoopFillZerobss+0x1c>)
 8001db4:	1842      	adds	r2, r0, r1
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3f6      	bcc.n	8001da8 <CopyDataInit>
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <LoopFillZerobss+0x20>)
 8001dbc:	e002      	b.n	8001dc4 <LoopFillZerobss>

08001dbe <FillZerobss>:
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f842 3b04 	str.w	r3, [r2], #4

08001dc4 <LoopFillZerobss>:
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <LoopFillZerobss+0x24>)
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d3f9      	bcc.n	8001dbe <FillZerobss>
 8001dca:	f7ff ffc5 	bl	8001d58 <SystemInit>
 8001dce:	f000 f815 	bl	8001dfc <__libc_init_array>
 8001dd2:	f7ff fa19 	bl	8001208 <main>
 8001dd6:	4770      	bx	lr
 8001dd8:	08002864 	.word	0x08002864
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000070 	.word	0x20000070
 8001de4:	20000070 	.word	0x20000070
 8001de8:	20000144 	.word	0x20000144

08001dec <ADC1_2_IRQHandler>:
 8001dec:	e7fe      	b.n	8001dec <ADC1_2_IRQHandler>
	...

08001df0 <__errno>:
 8001df0:	4b01      	ldr	r3, [pc, #4]	; (8001df8 <__errno+0x8>)
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	2000000c 	.word	0x2000000c

08001dfc <__libc_init_array>:
 8001dfc:	b570      	push	{r4, r5, r6, lr}
 8001dfe:	2500      	movs	r5, #0
 8001e00:	4e0c      	ldr	r6, [pc, #48]	; (8001e34 <__libc_init_array+0x38>)
 8001e02:	4c0d      	ldr	r4, [pc, #52]	; (8001e38 <__libc_init_array+0x3c>)
 8001e04:	1ba4      	subs	r4, r4, r6
 8001e06:	10a4      	asrs	r4, r4, #2
 8001e08:	42a5      	cmp	r5, r4
 8001e0a:	d109      	bne.n	8001e20 <__libc_init_array+0x24>
 8001e0c:	f000 fc4a 	bl	80026a4 <_init>
 8001e10:	2500      	movs	r5, #0
 8001e12:	4e0a      	ldr	r6, [pc, #40]	; (8001e3c <__libc_init_array+0x40>)
 8001e14:	4c0a      	ldr	r4, [pc, #40]	; (8001e40 <__libc_init_array+0x44>)
 8001e16:	1ba4      	subs	r4, r4, r6
 8001e18:	10a4      	asrs	r4, r4, #2
 8001e1a:	42a5      	cmp	r5, r4
 8001e1c:	d105      	bne.n	8001e2a <__libc_init_array+0x2e>
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}
 8001e20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e24:	4798      	blx	r3
 8001e26:	3501      	adds	r5, #1
 8001e28:	e7ee      	b.n	8001e08 <__libc_init_array+0xc>
 8001e2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e2e:	4798      	blx	r3
 8001e30:	3501      	adds	r5, #1
 8001e32:	e7f2      	b.n	8001e1a <__libc_init_array+0x1e>
 8001e34:	0800285c 	.word	0x0800285c
 8001e38:	0800285c 	.word	0x0800285c
 8001e3c:	0800285c 	.word	0x0800285c
 8001e40:	08002860 	.word	0x08002860

08001e44 <memcpy>:
 8001e44:	b510      	push	{r4, lr}
 8001e46:	1e43      	subs	r3, r0, #1
 8001e48:	440a      	add	r2, r1
 8001e4a:	4291      	cmp	r1, r2
 8001e4c:	d100      	bne.n	8001e50 <memcpy+0xc>
 8001e4e:	bd10      	pop	{r4, pc}
 8001e50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001e58:	e7f7      	b.n	8001e4a <memcpy+0x6>

08001e5a <memset>:
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4402      	add	r2, r0
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d100      	bne.n	8001e64 <memset+0xa>
 8001e62:	4770      	bx	lr
 8001e64:	f803 1b01 	strb.w	r1, [r3], #1
 8001e68:	e7f9      	b.n	8001e5e <memset+0x4>
	...

08001e6c <sniprintf>:
 8001e6c:	b40c      	push	{r2, r3}
 8001e6e:	b530      	push	{r4, r5, lr}
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <sniprintf+0x64>)
 8001e72:	1e0c      	subs	r4, r1, #0
 8001e74:	b09d      	sub	sp, #116	; 0x74
 8001e76:	681d      	ldr	r5, [r3, #0]
 8001e78:	da08      	bge.n	8001e8c <sniprintf+0x20>
 8001e7a:	238b      	movs	r3, #139	; 0x8b
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	602b      	str	r3, [r5, #0]
 8001e82:	b01d      	add	sp, #116	; 0x74
 8001e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e88:	b002      	add	sp, #8
 8001e8a:	4770      	bx	lr
 8001e8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001e90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001e94:	bf0c      	ite	eq
 8001e96:	4623      	moveq	r3, r4
 8001e98:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001e9c:	9304      	str	r3, [sp, #16]
 8001e9e:	9307      	str	r3, [sp, #28]
 8001ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ea4:	9002      	str	r0, [sp, #8]
 8001ea6:	9006      	str	r0, [sp, #24]
 8001ea8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001eac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001eae:	ab21      	add	r3, sp, #132	; 0x84
 8001eb0:	a902      	add	r1, sp, #8
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	f000 f867 	bl	8001f88 <_svfiprintf_r>
 8001eba:	1c43      	adds	r3, r0, #1
 8001ebc:	bfbc      	itt	lt
 8001ebe:	238b      	movlt	r3, #139	; 0x8b
 8001ec0:	602b      	strlt	r3, [r5, #0]
 8001ec2:	2c00      	cmp	r4, #0
 8001ec4:	d0dd      	beq.n	8001e82 <sniprintf+0x16>
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	9b02      	ldr	r3, [sp, #8]
 8001eca:	701a      	strb	r2, [r3, #0]
 8001ecc:	e7d9      	b.n	8001e82 <sniprintf+0x16>
 8001ece:	bf00      	nop
 8001ed0:	2000000c 	.word	0x2000000c

08001ed4 <__ssputs_r>:
 8001ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed8:	688e      	ldr	r6, [r1, #8]
 8001eda:	4682      	mov	sl, r0
 8001edc:	429e      	cmp	r6, r3
 8001ede:	460c      	mov	r4, r1
 8001ee0:	4690      	mov	r8, r2
 8001ee2:	4699      	mov	r9, r3
 8001ee4:	d837      	bhi.n	8001f56 <__ssputs_r+0x82>
 8001ee6:	898a      	ldrh	r2, [r1, #12]
 8001ee8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001eec:	d031      	beq.n	8001f52 <__ssputs_r+0x7e>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	6825      	ldr	r5, [r4, #0]
 8001ef2:	6909      	ldr	r1, [r1, #16]
 8001ef4:	1a6f      	subs	r7, r5, r1
 8001ef6:	6965      	ldr	r5, [r4, #20]
 8001ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001efc:	fb95 f5f3 	sdiv	r5, r5, r3
 8001f00:	f109 0301 	add.w	r3, r9, #1
 8001f04:	443b      	add	r3, r7
 8001f06:	429d      	cmp	r5, r3
 8001f08:	bf38      	it	cc
 8001f0a:	461d      	movcc	r5, r3
 8001f0c:	0553      	lsls	r3, r2, #21
 8001f0e:	d530      	bpl.n	8001f72 <__ssputs_r+0x9e>
 8001f10:	4629      	mov	r1, r5
 8001f12:	f000 fb2d 	bl	8002570 <_malloc_r>
 8001f16:	4606      	mov	r6, r0
 8001f18:	b950      	cbnz	r0, 8001f30 <__ssputs_r+0x5c>
 8001f1a:	230c      	movs	r3, #12
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f8ca 3000 	str.w	r3, [sl]
 8001f24:	89a3      	ldrh	r3, [r4, #12]
 8001f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f2a:	81a3      	strh	r3, [r4, #12]
 8001f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f30:	463a      	mov	r2, r7
 8001f32:	6921      	ldr	r1, [r4, #16]
 8001f34:	f7ff ff86 	bl	8001e44 <memcpy>
 8001f38:	89a3      	ldrh	r3, [r4, #12]
 8001f3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f42:	81a3      	strh	r3, [r4, #12]
 8001f44:	6126      	str	r6, [r4, #16]
 8001f46:	443e      	add	r6, r7
 8001f48:	6026      	str	r6, [r4, #0]
 8001f4a:	464e      	mov	r6, r9
 8001f4c:	6165      	str	r5, [r4, #20]
 8001f4e:	1bed      	subs	r5, r5, r7
 8001f50:	60a5      	str	r5, [r4, #8]
 8001f52:	454e      	cmp	r6, r9
 8001f54:	d900      	bls.n	8001f58 <__ssputs_r+0x84>
 8001f56:	464e      	mov	r6, r9
 8001f58:	4632      	mov	r2, r6
 8001f5a:	4641      	mov	r1, r8
 8001f5c:	6820      	ldr	r0, [r4, #0]
 8001f5e:	f000 faa1 	bl	80024a4 <memmove>
 8001f62:	68a3      	ldr	r3, [r4, #8]
 8001f64:	2000      	movs	r0, #0
 8001f66:	1b9b      	subs	r3, r3, r6
 8001f68:	60a3      	str	r3, [r4, #8]
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	441e      	add	r6, r3
 8001f6e:	6026      	str	r6, [r4, #0]
 8001f70:	e7dc      	b.n	8001f2c <__ssputs_r+0x58>
 8001f72:	462a      	mov	r2, r5
 8001f74:	f000 fb56 	bl	8002624 <_realloc_r>
 8001f78:	4606      	mov	r6, r0
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d1e2      	bne.n	8001f44 <__ssputs_r+0x70>
 8001f7e:	6921      	ldr	r1, [r4, #16]
 8001f80:	4650      	mov	r0, sl
 8001f82:	f000 faa9 	bl	80024d8 <_free_r>
 8001f86:	e7c8      	b.n	8001f1a <__ssputs_r+0x46>

08001f88 <_svfiprintf_r>:
 8001f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f8c:	461d      	mov	r5, r3
 8001f8e:	898b      	ldrh	r3, [r1, #12]
 8001f90:	b09d      	sub	sp, #116	; 0x74
 8001f92:	061f      	lsls	r7, r3, #24
 8001f94:	4680      	mov	r8, r0
 8001f96:	460c      	mov	r4, r1
 8001f98:	4616      	mov	r6, r2
 8001f9a:	d50f      	bpl.n	8001fbc <_svfiprintf_r+0x34>
 8001f9c:	690b      	ldr	r3, [r1, #16]
 8001f9e:	b96b      	cbnz	r3, 8001fbc <_svfiprintf_r+0x34>
 8001fa0:	2140      	movs	r1, #64	; 0x40
 8001fa2:	f000 fae5 	bl	8002570 <_malloc_r>
 8001fa6:	6020      	str	r0, [r4, #0]
 8001fa8:	6120      	str	r0, [r4, #16]
 8001faa:	b928      	cbnz	r0, 8001fb8 <_svfiprintf_r+0x30>
 8001fac:	230c      	movs	r3, #12
 8001fae:	f8c8 3000 	str.w	r3, [r8]
 8001fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb6:	e0c8      	b.n	800214a <_svfiprintf_r+0x1c2>
 8001fb8:	2340      	movs	r3, #64	; 0x40
 8001fba:	6163      	str	r3, [r4, #20]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001fc6:	2330      	movs	r3, #48	; 0x30
 8001fc8:	f04f 0b01 	mov.w	fp, #1
 8001fcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001fd0:	9503      	str	r5, [sp, #12]
 8001fd2:	4637      	mov	r7, r6
 8001fd4:	463d      	mov	r5, r7
 8001fd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001fda:	b10b      	cbz	r3, 8001fe0 <_svfiprintf_r+0x58>
 8001fdc:	2b25      	cmp	r3, #37	; 0x25
 8001fde:	d13e      	bne.n	800205e <_svfiprintf_r+0xd6>
 8001fe0:	ebb7 0a06 	subs.w	sl, r7, r6
 8001fe4:	d00b      	beq.n	8001ffe <_svfiprintf_r+0x76>
 8001fe6:	4653      	mov	r3, sl
 8001fe8:	4632      	mov	r2, r6
 8001fea:	4621      	mov	r1, r4
 8001fec:	4640      	mov	r0, r8
 8001fee:	f7ff ff71 	bl	8001ed4 <__ssputs_r>
 8001ff2:	3001      	adds	r0, #1
 8001ff4:	f000 80a4 	beq.w	8002140 <_svfiprintf_r+0x1b8>
 8001ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ffa:	4453      	add	r3, sl
 8001ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8001ffe:	783b      	ldrb	r3, [r7, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 809d 	beq.w	8002140 <_svfiprintf_r+0x1b8>
 8002006:	2300      	movs	r3, #0
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002010:	9304      	str	r3, [sp, #16]
 8002012:	9307      	str	r3, [sp, #28]
 8002014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002018:	931a      	str	r3, [sp, #104]	; 0x68
 800201a:	462f      	mov	r7, r5
 800201c:	2205      	movs	r2, #5
 800201e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002022:	4850      	ldr	r0, [pc, #320]	; (8002164 <_svfiprintf_r+0x1dc>)
 8002024:	f000 fa30 	bl	8002488 <memchr>
 8002028:	9b04      	ldr	r3, [sp, #16]
 800202a:	b9d0      	cbnz	r0, 8002062 <_svfiprintf_r+0xda>
 800202c:	06d9      	lsls	r1, r3, #27
 800202e:	bf44      	itt	mi
 8002030:	2220      	movmi	r2, #32
 8002032:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002036:	071a      	lsls	r2, r3, #28
 8002038:	bf44      	itt	mi
 800203a:	222b      	movmi	r2, #43	; 0x2b
 800203c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002040:	782a      	ldrb	r2, [r5, #0]
 8002042:	2a2a      	cmp	r2, #42	; 0x2a
 8002044:	d015      	beq.n	8002072 <_svfiprintf_r+0xea>
 8002046:	462f      	mov	r7, r5
 8002048:	2000      	movs	r0, #0
 800204a:	250a      	movs	r5, #10
 800204c:	9a07      	ldr	r2, [sp, #28]
 800204e:	4639      	mov	r1, r7
 8002050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002054:	3b30      	subs	r3, #48	; 0x30
 8002056:	2b09      	cmp	r3, #9
 8002058:	d94d      	bls.n	80020f6 <_svfiprintf_r+0x16e>
 800205a:	b1b8      	cbz	r0, 800208c <_svfiprintf_r+0x104>
 800205c:	e00f      	b.n	800207e <_svfiprintf_r+0xf6>
 800205e:	462f      	mov	r7, r5
 8002060:	e7b8      	b.n	8001fd4 <_svfiprintf_r+0x4c>
 8002062:	4a40      	ldr	r2, [pc, #256]	; (8002164 <_svfiprintf_r+0x1dc>)
 8002064:	463d      	mov	r5, r7
 8002066:	1a80      	subs	r0, r0, r2
 8002068:	fa0b f000 	lsl.w	r0, fp, r0
 800206c:	4318      	orrs	r0, r3
 800206e:	9004      	str	r0, [sp, #16]
 8002070:	e7d3      	b.n	800201a <_svfiprintf_r+0x92>
 8002072:	9a03      	ldr	r2, [sp, #12]
 8002074:	1d11      	adds	r1, r2, #4
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	9103      	str	r1, [sp, #12]
 800207a:	2a00      	cmp	r2, #0
 800207c:	db01      	blt.n	8002082 <_svfiprintf_r+0xfa>
 800207e:	9207      	str	r2, [sp, #28]
 8002080:	e004      	b.n	800208c <_svfiprintf_r+0x104>
 8002082:	4252      	negs	r2, r2
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	9207      	str	r2, [sp, #28]
 800208a:	9304      	str	r3, [sp, #16]
 800208c:	783b      	ldrb	r3, [r7, #0]
 800208e:	2b2e      	cmp	r3, #46	; 0x2e
 8002090:	d10c      	bne.n	80020ac <_svfiprintf_r+0x124>
 8002092:	787b      	ldrb	r3, [r7, #1]
 8002094:	2b2a      	cmp	r3, #42	; 0x2a
 8002096:	d133      	bne.n	8002100 <_svfiprintf_r+0x178>
 8002098:	9b03      	ldr	r3, [sp, #12]
 800209a:	3702      	adds	r7, #2
 800209c:	1d1a      	adds	r2, r3, #4
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	9203      	str	r2, [sp, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bfb8      	it	lt
 80020a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80020aa:	9305      	str	r3, [sp, #20]
 80020ac:	4d2e      	ldr	r5, [pc, #184]	; (8002168 <_svfiprintf_r+0x1e0>)
 80020ae:	2203      	movs	r2, #3
 80020b0:	7839      	ldrb	r1, [r7, #0]
 80020b2:	4628      	mov	r0, r5
 80020b4:	f000 f9e8 	bl	8002488 <memchr>
 80020b8:	b138      	cbz	r0, 80020ca <_svfiprintf_r+0x142>
 80020ba:	2340      	movs	r3, #64	; 0x40
 80020bc:	1b40      	subs	r0, r0, r5
 80020be:	fa03 f000 	lsl.w	r0, r3, r0
 80020c2:	9b04      	ldr	r3, [sp, #16]
 80020c4:	3701      	adds	r7, #1
 80020c6:	4303      	orrs	r3, r0
 80020c8:	9304      	str	r3, [sp, #16]
 80020ca:	7839      	ldrb	r1, [r7, #0]
 80020cc:	2206      	movs	r2, #6
 80020ce:	4827      	ldr	r0, [pc, #156]	; (800216c <_svfiprintf_r+0x1e4>)
 80020d0:	1c7e      	adds	r6, r7, #1
 80020d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80020d6:	f000 f9d7 	bl	8002488 <memchr>
 80020da:	2800      	cmp	r0, #0
 80020dc:	d038      	beq.n	8002150 <_svfiprintf_r+0x1c8>
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <_svfiprintf_r+0x1e8>)
 80020e0:	bb13      	cbnz	r3, 8002128 <_svfiprintf_r+0x1a0>
 80020e2:	9b03      	ldr	r3, [sp, #12]
 80020e4:	3307      	adds	r3, #7
 80020e6:	f023 0307 	bic.w	r3, r3, #7
 80020ea:	3308      	adds	r3, #8
 80020ec:	9303      	str	r3, [sp, #12]
 80020ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020f0:	444b      	add	r3, r9
 80020f2:	9309      	str	r3, [sp, #36]	; 0x24
 80020f4:	e76d      	b.n	8001fd2 <_svfiprintf_r+0x4a>
 80020f6:	fb05 3202 	mla	r2, r5, r2, r3
 80020fa:	2001      	movs	r0, #1
 80020fc:	460f      	mov	r7, r1
 80020fe:	e7a6      	b.n	800204e <_svfiprintf_r+0xc6>
 8002100:	2300      	movs	r3, #0
 8002102:	250a      	movs	r5, #10
 8002104:	4619      	mov	r1, r3
 8002106:	3701      	adds	r7, #1
 8002108:	9305      	str	r3, [sp, #20]
 800210a:	4638      	mov	r0, r7
 800210c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002110:	3a30      	subs	r2, #48	; 0x30
 8002112:	2a09      	cmp	r2, #9
 8002114:	d903      	bls.n	800211e <_svfiprintf_r+0x196>
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0c8      	beq.n	80020ac <_svfiprintf_r+0x124>
 800211a:	9105      	str	r1, [sp, #20]
 800211c:	e7c6      	b.n	80020ac <_svfiprintf_r+0x124>
 800211e:	fb05 2101 	mla	r1, r5, r1, r2
 8002122:	2301      	movs	r3, #1
 8002124:	4607      	mov	r7, r0
 8002126:	e7f0      	b.n	800210a <_svfiprintf_r+0x182>
 8002128:	ab03      	add	r3, sp, #12
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	4622      	mov	r2, r4
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <_svfiprintf_r+0x1ec>)
 8002130:	a904      	add	r1, sp, #16
 8002132:	4640      	mov	r0, r8
 8002134:	f3af 8000 	nop.w
 8002138:	f1b0 3fff 	cmp.w	r0, #4294967295
 800213c:	4681      	mov	r9, r0
 800213e:	d1d6      	bne.n	80020ee <_svfiprintf_r+0x166>
 8002140:	89a3      	ldrh	r3, [r4, #12]
 8002142:	065b      	lsls	r3, r3, #25
 8002144:	f53f af35 	bmi.w	8001fb2 <_svfiprintf_r+0x2a>
 8002148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800214a:	b01d      	add	sp, #116	; 0x74
 800214c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002150:	ab03      	add	r3, sp, #12
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	4622      	mov	r2, r4
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <_svfiprintf_r+0x1ec>)
 8002158:	a904      	add	r1, sp, #16
 800215a:	4640      	mov	r0, r8
 800215c:	f000 f882 	bl	8002264 <_printf_i>
 8002160:	e7ea      	b.n	8002138 <_svfiprintf_r+0x1b0>
 8002162:	bf00      	nop
 8002164:	08002829 	.word	0x08002829
 8002168:	0800282f 	.word	0x0800282f
 800216c:	08002833 	.word	0x08002833
 8002170:	00000000 	.word	0x00000000
 8002174:	08001ed5 	.word	0x08001ed5

08002178 <_printf_common>:
 8002178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800217c:	4691      	mov	r9, r2
 800217e:	461f      	mov	r7, r3
 8002180:	688a      	ldr	r2, [r1, #8]
 8002182:	690b      	ldr	r3, [r1, #16]
 8002184:	4606      	mov	r6, r0
 8002186:	4293      	cmp	r3, r2
 8002188:	bfb8      	it	lt
 800218a:	4613      	movlt	r3, r2
 800218c:	f8c9 3000 	str.w	r3, [r9]
 8002190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002194:	460c      	mov	r4, r1
 8002196:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800219a:	b112      	cbz	r2, 80021a2 <_printf_common+0x2a>
 800219c:	3301      	adds	r3, #1
 800219e:	f8c9 3000 	str.w	r3, [r9]
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	0699      	lsls	r1, r3, #26
 80021a6:	bf42      	ittt	mi
 80021a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80021ac:	3302      	addmi	r3, #2
 80021ae:	f8c9 3000 	strmi.w	r3, [r9]
 80021b2:	6825      	ldr	r5, [r4, #0]
 80021b4:	f015 0506 	ands.w	r5, r5, #6
 80021b8:	d107      	bne.n	80021ca <_printf_common+0x52>
 80021ba:	f104 0a19 	add.w	sl, r4, #25
 80021be:	68e3      	ldr	r3, [r4, #12]
 80021c0:	f8d9 2000 	ldr.w	r2, [r9]
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	42ab      	cmp	r3, r5
 80021c8:	dc29      	bgt.n	800221e <_printf_common+0xa6>
 80021ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80021ce:	6822      	ldr	r2, [r4, #0]
 80021d0:	3300      	adds	r3, #0
 80021d2:	bf18      	it	ne
 80021d4:	2301      	movne	r3, #1
 80021d6:	0692      	lsls	r2, r2, #26
 80021d8:	d42e      	bmi.n	8002238 <_printf_common+0xc0>
 80021da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021de:	4639      	mov	r1, r7
 80021e0:	4630      	mov	r0, r6
 80021e2:	47c0      	blx	r8
 80021e4:	3001      	adds	r0, #1
 80021e6:	d021      	beq.n	800222c <_printf_common+0xb4>
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	68e5      	ldr	r5, [r4, #12]
 80021ec:	f003 0306 	and.w	r3, r3, #6
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	bf18      	it	ne
 80021f4:	2500      	movne	r5, #0
 80021f6:	f8d9 2000 	ldr.w	r2, [r9]
 80021fa:	f04f 0900 	mov.w	r9, #0
 80021fe:	bf08      	it	eq
 8002200:	1aad      	subeq	r5, r5, r2
 8002202:	68a3      	ldr	r3, [r4, #8]
 8002204:	6922      	ldr	r2, [r4, #16]
 8002206:	bf08      	it	eq
 8002208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800220c:	4293      	cmp	r3, r2
 800220e:	bfc4      	itt	gt
 8002210:	1a9b      	subgt	r3, r3, r2
 8002212:	18ed      	addgt	r5, r5, r3
 8002214:	341a      	adds	r4, #26
 8002216:	454d      	cmp	r5, r9
 8002218:	d11a      	bne.n	8002250 <_printf_common+0xd8>
 800221a:	2000      	movs	r0, #0
 800221c:	e008      	b.n	8002230 <_printf_common+0xb8>
 800221e:	2301      	movs	r3, #1
 8002220:	4652      	mov	r2, sl
 8002222:	4639      	mov	r1, r7
 8002224:	4630      	mov	r0, r6
 8002226:	47c0      	blx	r8
 8002228:	3001      	adds	r0, #1
 800222a:	d103      	bne.n	8002234 <_printf_common+0xbc>
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002234:	3501      	adds	r5, #1
 8002236:	e7c2      	b.n	80021be <_printf_common+0x46>
 8002238:	2030      	movs	r0, #48	; 0x30
 800223a:	18e1      	adds	r1, r4, r3
 800223c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002246:	4422      	add	r2, r4
 8002248:	3302      	adds	r3, #2
 800224a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800224e:	e7c4      	b.n	80021da <_printf_common+0x62>
 8002250:	2301      	movs	r3, #1
 8002252:	4622      	mov	r2, r4
 8002254:	4639      	mov	r1, r7
 8002256:	4630      	mov	r0, r6
 8002258:	47c0      	blx	r8
 800225a:	3001      	adds	r0, #1
 800225c:	d0e6      	beq.n	800222c <_printf_common+0xb4>
 800225e:	f109 0901 	add.w	r9, r9, #1
 8002262:	e7d8      	b.n	8002216 <_printf_common+0x9e>

08002264 <_printf_i>:
 8002264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002268:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800226c:	460c      	mov	r4, r1
 800226e:	7e09      	ldrb	r1, [r1, #24]
 8002270:	b085      	sub	sp, #20
 8002272:	296e      	cmp	r1, #110	; 0x6e
 8002274:	4617      	mov	r7, r2
 8002276:	4606      	mov	r6, r0
 8002278:	4698      	mov	r8, r3
 800227a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800227c:	f000 80b3 	beq.w	80023e6 <_printf_i+0x182>
 8002280:	d822      	bhi.n	80022c8 <_printf_i+0x64>
 8002282:	2963      	cmp	r1, #99	; 0x63
 8002284:	d036      	beq.n	80022f4 <_printf_i+0x90>
 8002286:	d80a      	bhi.n	800229e <_printf_i+0x3a>
 8002288:	2900      	cmp	r1, #0
 800228a:	f000 80b9 	beq.w	8002400 <_printf_i+0x19c>
 800228e:	2958      	cmp	r1, #88	; 0x58
 8002290:	f000 8083 	beq.w	800239a <_printf_i+0x136>
 8002294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002298:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800229c:	e032      	b.n	8002304 <_printf_i+0xa0>
 800229e:	2964      	cmp	r1, #100	; 0x64
 80022a0:	d001      	beq.n	80022a6 <_printf_i+0x42>
 80022a2:	2969      	cmp	r1, #105	; 0x69
 80022a4:	d1f6      	bne.n	8002294 <_printf_i+0x30>
 80022a6:	6820      	ldr	r0, [r4, #0]
 80022a8:	6813      	ldr	r3, [r2, #0]
 80022aa:	0605      	lsls	r5, r0, #24
 80022ac:	f103 0104 	add.w	r1, r3, #4
 80022b0:	d52a      	bpl.n	8002308 <_printf_i+0xa4>
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6011      	str	r1, [r2, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da03      	bge.n	80022c2 <_printf_i+0x5e>
 80022ba:	222d      	movs	r2, #45	; 0x2d
 80022bc:	425b      	negs	r3, r3
 80022be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80022c2:	486f      	ldr	r0, [pc, #444]	; (8002480 <_printf_i+0x21c>)
 80022c4:	220a      	movs	r2, #10
 80022c6:	e039      	b.n	800233c <_printf_i+0xd8>
 80022c8:	2973      	cmp	r1, #115	; 0x73
 80022ca:	f000 809d 	beq.w	8002408 <_printf_i+0x1a4>
 80022ce:	d808      	bhi.n	80022e2 <_printf_i+0x7e>
 80022d0:	296f      	cmp	r1, #111	; 0x6f
 80022d2:	d020      	beq.n	8002316 <_printf_i+0xb2>
 80022d4:	2970      	cmp	r1, #112	; 0x70
 80022d6:	d1dd      	bne.n	8002294 <_printf_i+0x30>
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	f043 0320 	orr.w	r3, r3, #32
 80022de:	6023      	str	r3, [r4, #0]
 80022e0:	e003      	b.n	80022ea <_printf_i+0x86>
 80022e2:	2975      	cmp	r1, #117	; 0x75
 80022e4:	d017      	beq.n	8002316 <_printf_i+0xb2>
 80022e6:	2978      	cmp	r1, #120	; 0x78
 80022e8:	d1d4      	bne.n	8002294 <_printf_i+0x30>
 80022ea:	2378      	movs	r3, #120	; 0x78
 80022ec:	4865      	ldr	r0, [pc, #404]	; (8002484 <_printf_i+0x220>)
 80022ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80022f2:	e055      	b.n	80023a0 <_printf_i+0x13c>
 80022f4:	6813      	ldr	r3, [r2, #0]
 80022f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022fa:	1d19      	adds	r1, r3, #4
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6011      	str	r1, [r2, #0]
 8002300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002304:	2301      	movs	r3, #1
 8002306:	e08c      	b.n	8002422 <_printf_i+0x1be>
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800230e:	6011      	str	r1, [r2, #0]
 8002310:	bf18      	it	ne
 8002312:	b21b      	sxthne	r3, r3
 8002314:	e7cf      	b.n	80022b6 <_printf_i+0x52>
 8002316:	6813      	ldr	r3, [r2, #0]
 8002318:	6825      	ldr	r5, [r4, #0]
 800231a:	1d18      	adds	r0, r3, #4
 800231c:	6010      	str	r0, [r2, #0]
 800231e:	0628      	lsls	r0, r5, #24
 8002320:	d501      	bpl.n	8002326 <_printf_i+0xc2>
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	e002      	b.n	800232c <_printf_i+0xc8>
 8002326:	0668      	lsls	r0, r5, #25
 8002328:	d5fb      	bpl.n	8002322 <_printf_i+0xbe>
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	296f      	cmp	r1, #111	; 0x6f
 800232e:	bf14      	ite	ne
 8002330:	220a      	movne	r2, #10
 8002332:	2208      	moveq	r2, #8
 8002334:	4852      	ldr	r0, [pc, #328]	; (8002480 <_printf_i+0x21c>)
 8002336:	2100      	movs	r1, #0
 8002338:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800233c:	6865      	ldr	r5, [r4, #4]
 800233e:	2d00      	cmp	r5, #0
 8002340:	60a5      	str	r5, [r4, #8]
 8002342:	f2c0 8095 	blt.w	8002470 <_printf_i+0x20c>
 8002346:	6821      	ldr	r1, [r4, #0]
 8002348:	f021 0104 	bic.w	r1, r1, #4
 800234c:	6021      	str	r1, [r4, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d13d      	bne.n	80023ce <_printf_i+0x16a>
 8002352:	2d00      	cmp	r5, #0
 8002354:	f040 808e 	bne.w	8002474 <_printf_i+0x210>
 8002358:	4665      	mov	r5, ip
 800235a:	2a08      	cmp	r2, #8
 800235c:	d10b      	bne.n	8002376 <_printf_i+0x112>
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	07db      	lsls	r3, r3, #31
 8002362:	d508      	bpl.n	8002376 <_printf_i+0x112>
 8002364:	6923      	ldr	r3, [r4, #16]
 8002366:	6862      	ldr	r2, [r4, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	bfde      	ittt	le
 800236c:	2330      	movle	r3, #48	; 0x30
 800236e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002372:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002376:	ebac 0305 	sub.w	r3, ip, r5
 800237a:	6123      	str	r3, [r4, #16]
 800237c:	f8cd 8000 	str.w	r8, [sp]
 8002380:	463b      	mov	r3, r7
 8002382:	aa03      	add	r2, sp, #12
 8002384:	4621      	mov	r1, r4
 8002386:	4630      	mov	r0, r6
 8002388:	f7ff fef6 	bl	8002178 <_printf_common>
 800238c:	3001      	adds	r0, #1
 800238e:	d14d      	bne.n	800242c <_printf_i+0x1c8>
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	b005      	add	sp, #20
 8002396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800239a:	4839      	ldr	r0, [pc, #228]	; (8002480 <_printf_i+0x21c>)
 800239c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80023a0:	6813      	ldr	r3, [r2, #0]
 80023a2:	6821      	ldr	r1, [r4, #0]
 80023a4:	1d1d      	adds	r5, r3, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6015      	str	r5, [r2, #0]
 80023aa:	060a      	lsls	r2, r1, #24
 80023ac:	d50b      	bpl.n	80023c6 <_printf_i+0x162>
 80023ae:	07ca      	lsls	r2, r1, #31
 80023b0:	bf44      	itt	mi
 80023b2:	f041 0120 	orrmi.w	r1, r1, #32
 80023b6:	6021      	strmi	r1, [r4, #0]
 80023b8:	b91b      	cbnz	r3, 80023c2 <_printf_i+0x15e>
 80023ba:	6822      	ldr	r2, [r4, #0]
 80023bc:	f022 0220 	bic.w	r2, r2, #32
 80023c0:	6022      	str	r2, [r4, #0]
 80023c2:	2210      	movs	r2, #16
 80023c4:	e7b7      	b.n	8002336 <_printf_i+0xd2>
 80023c6:	064d      	lsls	r5, r1, #25
 80023c8:	bf48      	it	mi
 80023ca:	b29b      	uxthmi	r3, r3
 80023cc:	e7ef      	b.n	80023ae <_printf_i+0x14a>
 80023ce:	4665      	mov	r5, ip
 80023d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80023d4:	fb02 3311 	mls	r3, r2, r1, r3
 80023d8:	5cc3      	ldrb	r3, [r0, r3]
 80023da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80023de:	460b      	mov	r3, r1
 80023e0:	2900      	cmp	r1, #0
 80023e2:	d1f5      	bne.n	80023d0 <_printf_i+0x16c>
 80023e4:	e7b9      	b.n	800235a <_printf_i+0xf6>
 80023e6:	6813      	ldr	r3, [r2, #0]
 80023e8:	6825      	ldr	r5, [r4, #0]
 80023ea:	1d18      	adds	r0, r3, #4
 80023ec:	6961      	ldr	r1, [r4, #20]
 80023ee:	6010      	str	r0, [r2, #0]
 80023f0:	0628      	lsls	r0, r5, #24
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	d501      	bpl.n	80023fa <_printf_i+0x196>
 80023f6:	6019      	str	r1, [r3, #0]
 80023f8:	e002      	b.n	8002400 <_printf_i+0x19c>
 80023fa:	066a      	lsls	r2, r5, #25
 80023fc:	d5fb      	bpl.n	80023f6 <_printf_i+0x192>
 80023fe:	8019      	strh	r1, [r3, #0]
 8002400:	2300      	movs	r3, #0
 8002402:	4665      	mov	r5, ip
 8002404:	6123      	str	r3, [r4, #16]
 8002406:	e7b9      	b.n	800237c <_printf_i+0x118>
 8002408:	6813      	ldr	r3, [r2, #0]
 800240a:	1d19      	adds	r1, r3, #4
 800240c:	6011      	str	r1, [r2, #0]
 800240e:	681d      	ldr	r5, [r3, #0]
 8002410:	6862      	ldr	r2, [r4, #4]
 8002412:	2100      	movs	r1, #0
 8002414:	4628      	mov	r0, r5
 8002416:	f000 f837 	bl	8002488 <memchr>
 800241a:	b108      	cbz	r0, 8002420 <_printf_i+0x1bc>
 800241c:	1b40      	subs	r0, r0, r5
 800241e:	6060      	str	r0, [r4, #4]
 8002420:	6863      	ldr	r3, [r4, #4]
 8002422:	6123      	str	r3, [r4, #16]
 8002424:	2300      	movs	r3, #0
 8002426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800242a:	e7a7      	b.n	800237c <_printf_i+0x118>
 800242c:	6923      	ldr	r3, [r4, #16]
 800242e:	462a      	mov	r2, r5
 8002430:	4639      	mov	r1, r7
 8002432:	4630      	mov	r0, r6
 8002434:	47c0      	blx	r8
 8002436:	3001      	adds	r0, #1
 8002438:	d0aa      	beq.n	8002390 <_printf_i+0x12c>
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	079b      	lsls	r3, r3, #30
 800243e:	d413      	bmi.n	8002468 <_printf_i+0x204>
 8002440:	68e0      	ldr	r0, [r4, #12]
 8002442:	9b03      	ldr	r3, [sp, #12]
 8002444:	4298      	cmp	r0, r3
 8002446:	bfb8      	it	lt
 8002448:	4618      	movlt	r0, r3
 800244a:	e7a3      	b.n	8002394 <_printf_i+0x130>
 800244c:	2301      	movs	r3, #1
 800244e:	464a      	mov	r2, r9
 8002450:	4639      	mov	r1, r7
 8002452:	4630      	mov	r0, r6
 8002454:	47c0      	blx	r8
 8002456:	3001      	adds	r0, #1
 8002458:	d09a      	beq.n	8002390 <_printf_i+0x12c>
 800245a:	3501      	adds	r5, #1
 800245c:	68e3      	ldr	r3, [r4, #12]
 800245e:	9a03      	ldr	r2, [sp, #12]
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	42ab      	cmp	r3, r5
 8002464:	dcf2      	bgt.n	800244c <_printf_i+0x1e8>
 8002466:	e7eb      	b.n	8002440 <_printf_i+0x1dc>
 8002468:	2500      	movs	r5, #0
 800246a:	f104 0919 	add.w	r9, r4, #25
 800246e:	e7f5      	b.n	800245c <_printf_i+0x1f8>
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ac      	bne.n	80023ce <_printf_i+0x16a>
 8002474:	7803      	ldrb	r3, [r0, #0]
 8002476:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800247a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800247e:	e76c      	b.n	800235a <_printf_i+0xf6>
 8002480:	0800283a 	.word	0x0800283a
 8002484:	0800284b 	.word	0x0800284b

08002488 <memchr>:
 8002488:	b510      	push	{r4, lr}
 800248a:	b2c9      	uxtb	r1, r1
 800248c:	4402      	add	r2, r0
 800248e:	4290      	cmp	r0, r2
 8002490:	4603      	mov	r3, r0
 8002492:	d101      	bne.n	8002498 <memchr+0x10>
 8002494:	2300      	movs	r3, #0
 8002496:	e003      	b.n	80024a0 <memchr+0x18>
 8002498:	781c      	ldrb	r4, [r3, #0]
 800249a:	3001      	adds	r0, #1
 800249c:	428c      	cmp	r4, r1
 800249e:	d1f6      	bne.n	800248e <memchr+0x6>
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd10      	pop	{r4, pc}

080024a4 <memmove>:
 80024a4:	4288      	cmp	r0, r1
 80024a6:	b510      	push	{r4, lr}
 80024a8:	eb01 0302 	add.w	r3, r1, r2
 80024ac:	d807      	bhi.n	80024be <memmove+0x1a>
 80024ae:	1e42      	subs	r2, r0, #1
 80024b0:	4299      	cmp	r1, r3
 80024b2:	d00a      	beq.n	80024ca <memmove+0x26>
 80024b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80024bc:	e7f8      	b.n	80024b0 <memmove+0xc>
 80024be:	4283      	cmp	r3, r0
 80024c0:	d9f5      	bls.n	80024ae <memmove+0xa>
 80024c2:	1881      	adds	r1, r0, r2
 80024c4:	1ad2      	subs	r2, r2, r3
 80024c6:	42d3      	cmn	r3, r2
 80024c8:	d100      	bne.n	80024cc <memmove+0x28>
 80024ca:	bd10      	pop	{r4, pc}
 80024cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80024d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80024d4:	e7f7      	b.n	80024c6 <memmove+0x22>
	...

080024d8 <_free_r>:
 80024d8:	b538      	push	{r3, r4, r5, lr}
 80024da:	4605      	mov	r5, r0
 80024dc:	2900      	cmp	r1, #0
 80024de:	d043      	beq.n	8002568 <_free_r+0x90>
 80024e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024e4:	1f0c      	subs	r4, r1, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	bfb8      	it	lt
 80024ea:	18e4      	addlt	r4, r4, r3
 80024ec:	f000 f8d0 	bl	8002690 <__malloc_lock>
 80024f0:	4a1e      	ldr	r2, [pc, #120]	; (800256c <_free_r+0x94>)
 80024f2:	6813      	ldr	r3, [r2, #0]
 80024f4:	4610      	mov	r0, r2
 80024f6:	b933      	cbnz	r3, 8002506 <_free_r+0x2e>
 80024f8:	6063      	str	r3, [r4, #4]
 80024fa:	6014      	str	r4, [r2, #0]
 80024fc:	4628      	mov	r0, r5
 80024fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002502:	f000 b8c6 	b.w	8002692 <__malloc_unlock>
 8002506:	42a3      	cmp	r3, r4
 8002508:	d90b      	bls.n	8002522 <_free_r+0x4a>
 800250a:	6821      	ldr	r1, [r4, #0]
 800250c:	1862      	adds	r2, r4, r1
 800250e:	4293      	cmp	r3, r2
 8002510:	bf01      	itttt	eq
 8002512:	681a      	ldreq	r2, [r3, #0]
 8002514:	685b      	ldreq	r3, [r3, #4]
 8002516:	1852      	addeq	r2, r2, r1
 8002518:	6022      	streq	r2, [r4, #0]
 800251a:	6063      	str	r3, [r4, #4]
 800251c:	6004      	str	r4, [r0, #0]
 800251e:	e7ed      	b.n	80024fc <_free_r+0x24>
 8002520:	4613      	mov	r3, r2
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	b10a      	cbz	r2, 800252a <_free_r+0x52>
 8002526:	42a2      	cmp	r2, r4
 8002528:	d9fa      	bls.n	8002520 <_free_r+0x48>
 800252a:	6819      	ldr	r1, [r3, #0]
 800252c:	1858      	adds	r0, r3, r1
 800252e:	42a0      	cmp	r0, r4
 8002530:	d10b      	bne.n	800254a <_free_r+0x72>
 8002532:	6820      	ldr	r0, [r4, #0]
 8002534:	4401      	add	r1, r0
 8002536:	1858      	adds	r0, r3, r1
 8002538:	4282      	cmp	r2, r0
 800253a:	6019      	str	r1, [r3, #0]
 800253c:	d1de      	bne.n	80024fc <_free_r+0x24>
 800253e:	6810      	ldr	r0, [r2, #0]
 8002540:	6852      	ldr	r2, [r2, #4]
 8002542:	4401      	add	r1, r0
 8002544:	6019      	str	r1, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	e7d8      	b.n	80024fc <_free_r+0x24>
 800254a:	d902      	bls.n	8002552 <_free_r+0x7a>
 800254c:	230c      	movs	r3, #12
 800254e:	602b      	str	r3, [r5, #0]
 8002550:	e7d4      	b.n	80024fc <_free_r+0x24>
 8002552:	6820      	ldr	r0, [r4, #0]
 8002554:	1821      	adds	r1, r4, r0
 8002556:	428a      	cmp	r2, r1
 8002558:	bf01      	itttt	eq
 800255a:	6811      	ldreq	r1, [r2, #0]
 800255c:	6852      	ldreq	r2, [r2, #4]
 800255e:	1809      	addeq	r1, r1, r0
 8002560:	6021      	streq	r1, [r4, #0]
 8002562:	6062      	str	r2, [r4, #4]
 8002564:	605c      	str	r4, [r3, #4]
 8002566:	e7c9      	b.n	80024fc <_free_r+0x24>
 8002568:	bd38      	pop	{r3, r4, r5, pc}
 800256a:	bf00      	nop
 800256c:	20000098 	.word	0x20000098

08002570 <_malloc_r>:
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	1ccd      	adds	r5, r1, #3
 8002574:	f025 0503 	bic.w	r5, r5, #3
 8002578:	3508      	adds	r5, #8
 800257a:	2d0c      	cmp	r5, #12
 800257c:	bf38      	it	cc
 800257e:	250c      	movcc	r5, #12
 8002580:	2d00      	cmp	r5, #0
 8002582:	4606      	mov	r6, r0
 8002584:	db01      	blt.n	800258a <_malloc_r+0x1a>
 8002586:	42a9      	cmp	r1, r5
 8002588:	d903      	bls.n	8002592 <_malloc_r+0x22>
 800258a:	230c      	movs	r3, #12
 800258c:	6033      	str	r3, [r6, #0]
 800258e:	2000      	movs	r0, #0
 8002590:	bd70      	pop	{r4, r5, r6, pc}
 8002592:	f000 f87d 	bl	8002690 <__malloc_lock>
 8002596:	4a21      	ldr	r2, [pc, #132]	; (800261c <_malloc_r+0xac>)
 8002598:	6814      	ldr	r4, [r2, #0]
 800259a:	4621      	mov	r1, r4
 800259c:	b991      	cbnz	r1, 80025c4 <_malloc_r+0x54>
 800259e:	4c20      	ldr	r4, [pc, #128]	; (8002620 <_malloc_r+0xb0>)
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	b91b      	cbnz	r3, 80025ac <_malloc_r+0x3c>
 80025a4:	4630      	mov	r0, r6
 80025a6:	f000 f863 	bl	8002670 <_sbrk_r>
 80025aa:	6020      	str	r0, [r4, #0]
 80025ac:	4629      	mov	r1, r5
 80025ae:	4630      	mov	r0, r6
 80025b0:	f000 f85e 	bl	8002670 <_sbrk_r>
 80025b4:	1c43      	adds	r3, r0, #1
 80025b6:	d124      	bne.n	8002602 <_malloc_r+0x92>
 80025b8:	230c      	movs	r3, #12
 80025ba:	4630      	mov	r0, r6
 80025bc:	6033      	str	r3, [r6, #0]
 80025be:	f000 f868 	bl	8002692 <__malloc_unlock>
 80025c2:	e7e4      	b.n	800258e <_malloc_r+0x1e>
 80025c4:	680b      	ldr	r3, [r1, #0]
 80025c6:	1b5b      	subs	r3, r3, r5
 80025c8:	d418      	bmi.n	80025fc <_malloc_r+0x8c>
 80025ca:	2b0b      	cmp	r3, #11
 80025cc:	d90f      	bls.n	80025ee <_malloc_r+0x7e>
 80025ce:	600b      	str	r3, [r1, #0]
 80025d0:	18cc      	adds	r4, r1, r3
 80025d2:	50cd      	str	r5, [r1, r3]
 80025d4:	4630      	mov	r0, r6
 80025d6:	f000 f85c 	bl	8002692 <__malloc_unlock>
 80025da:	f104 000b 	add.w	r0, r4, #11
 80025de:	1d23      	adds	r3, r4, #4
 80025e0:	f020 0007 	bic.w	r0, r0, #7
 80025e4:	1ac3      	subs	r3, r0, r3
 80025e6:	d0d3      	beq.n	8002590 <_malloc_r+0x20>
 80025e8:	425a      	negs	r2, r3
 80025ea:	50e2      	str	r2, [r4, r3]
 80025ec:	e7d0      	b.n	8002590 <_malloc_r+0x20>
 80025ee:	684b      	ldr	r3, [r1, #4]
 80025f0:	428c      	cmp	r4, r1
 80025f2:	bf16      	itet	ne
 80025f4:	6063      	strne	r3, [r4, #4]
 80025f6:	6013      	streq	r3, [r2, #0]
 80025f8:	460c      	movne	r4, r1
 80025fa:	e7eb      	b.n	80025d4 <_malloc_r+0x64>
 80025fc:	460c      	mov	r4, r1
 80025fe:	6849      	ldr	r1, [r1, #4]
 8002600:	e7cc      	b.n	800259c <_malloc_r+0x2c>
 8002602:	1cc4      	adds	r4, r0, #3
 8002604:	f024 0403 	bic.w	r4, r4, #3
 8002608:	42a0      	cmp	r0, r4
 800260a:	d005      	beq.n	8002618 <_malloc_r+0xa8>
 800260c:	1a21      	subs	r1, r4, r0
 800260e:	4630      	mov	r0, r6
 8002610:	f000 f82e 	bl	8002670 <_sbrk_r>
 8002614:	3001      	adds	r0, #1
 8002616:	d0cf      	beq.n	80025b8 <_malloc_r+0x48>
 8002618:	6025      	str	r5, [r4, #0]
 800261a:	e7db      	b.n	80025d4 <_malloc_r+0x64>
 800261c:	20000098 	.word	0x20000098
 8002620:	2000009c 	.word	0x2000009c

08002624 <_realloc_r>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	4607      	mov	r7, r0
 8002628:	4614      	mov	r4, r2
 800262a:	460e      	mov	r6, r1
 800262c:	b921      	cbnz	r1, 8002638 <_realloc_r+0x14>
 800262e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002632:	4611      	mov	r1, r2
 8002634:	f7ff bf9c 	b.w	8002570 <_malloc_r>
 8002638:	b922      	cbnz	r2, 8002644 <_realloc_r+0x20>
 800263a:	f7ff ff4d 	bl	80024d8 <_free_r>
 800263e:	4625      	mov	r5, r4
 8002640:	4628      	mov	r0, r5
 8002642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002644:	f000 f826 	bl	8002694 <_malloc_usable_size_r>
 8002648:	42a0      	cmp	r0, r4
 800264a:	d20f      	bcs.n	800266c <_realloc_r+0x48>
 800264c:	4621      	mov	r1, r4
 800264e:	4638      	mov	r0, r7
 8002650:	f7ff ff8e 	bl	8002570 <_malloc_r>
 8002654:	4605      	mov	r5, r0
 8002656:	2800      	cmp	r0, #0
 8002658:	d0f2      	beq.n	8002640 <_realloc_r+0x1c>
 800265a:	4631      	mov	r1, r6
 800265c:	4622      	mov	r2, r4
 800265e:	f7ff fbf1 	bl	8001e44 <memcpy>
 8002662:	4631      	mov	r1, r6
 8002664:	4638      	mov	r0, r7
 8002666:	f7ff ff37 	bl	80024d8 <_free_r>
 800266a:	e7e9      	b.n	8002640 <_realloc_r+0x1c>
 800266c:	4635      	mov	r5, r6
 800266e:	e7e7      	b.n	8002640 <_realloc_r+0x1c>

08002670 <_sbrk_r>:
 8002670:	b538      	push	{r3, r4, r5, lr}
 8002672:	2300      	movs	r3, #0
 8002674:	4c05      	ldr	r4, [pc, #20]	; (800268c <_sbrk_r+0x1c>)
 8002676:	4605      	mov	r5, r0
 8002678:	4608      	mov	r0, r1
 800267a:	6023      	str	r3, [r4, #0]
 800267c:	f7ff fb52 	bl	8001d24 <_sbrk>
 8002680:	1c43      	adds	r3, r0, #1
 8002682:	d102      	bne.n	800268a <_sbrk_r+0x1a>
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	b103      	cbz	r3, 800268a <_sbrk_r+0x1a>
 8002688:	602b      	str	r3, [r5, #0]
 800268a:	bd38      	pop	{r3, r4, r5, pc}
 800268c:	20000140 	.word	0x20000140

08002690 <__malloc_lock>:
 8002690:	4770      	bx	lr

08002692 <__malloc_unlock>:
 8002692:	4770      	bx	lr

08002694 <_malloc_usable_size_r>:
 8002694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002698:	1f18      	subs	r0, r3, #4
 800269a:	2b00      	cmp	r3, #0
 800269c:	bfbc      	itt	lt
 800269e:	580b      	ldrlt	r3, [r1, r0]
 80026a0:	18c0      	addlt	r0, r0, r3
 80026a2:	4770      	bx	lr

080026a4 <_init>:
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a6:	bf00      	nop
 80026a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026aa:	bc08      	pop	{r3}
 80026ac:	469e      	mov	lr, r3
 80026ae:	4770      	bx	lr

080026b0 <_fini>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	bf00      	nop
 80026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b6:	bc08      	pop	{r3}
 80026b8:	469e      	mov	lr, r3
 80026ba:	4770      	bx	lr
